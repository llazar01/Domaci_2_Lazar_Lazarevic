
Domaci_2_LL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b08  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08003c14  08003c14  00013c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d30  08003d30  000200b4  2**0
                  CONTENTS
  4 .ARM          00000000  08003d30  08003d30  000200b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d30  08003d30  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d30  08003d30  00013d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d34  08003d34  00013d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08003d38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  200000b4  08003dec  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08003dec  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004f9c  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015e9  00000000  00000000  000250bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005e0  00000000  00000000  000266a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000441  00000000  00000000  00026c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000177c9  00000000  00000000  000270c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000756a  00000000  00000000  0003e892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008422c  00000000  00000000  00045dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f5c  00000000  00000000  000ca028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000cbf84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b4 	.word	0x200000b4
 8000128:	00000000 	.word	0x00000000
 800012c:	08003bfc 	.word	0x08003bfc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b8 	.word	0x200000b8
 8000148:	08003bfc 	.word	0x08003bfc

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__gesf2>:
 8000988:	f04f 3cff 	mov.w	ip, #4294967295
 800098c:	e006      	b.n	800099c <__cmpsf2+0x4>
 800098e:	bf00      	nop

08000990 <__lesf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	e002      	b.n	800099c <__cmpsf2+0x4>
 8000996:	bf00      	nop

08000998 <__cmpsf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009a4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009a8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009ac:	bf18      	it	ne
 80009ae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009b2:	d011      	beq.n	80009d8 <__cmpsf2+0x40>
 80009b4:	b001      	add	sp, #4
 80009b6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80009ba:	bf18      	it	ne
 80009bc:	ea90 0f01 	teqne	r0, r1
 80009c0:	bf58      	it	pl
 80009c2:	ebb2 0003 	subspl.w	r0, r2, r3
 80009c6:	bf88      	it	hi
 80009c8:	17c8      	asrhi	r0, r1, #31
 80009ca:	bf38      	it	cc
 80009cc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80009d0:	bf18      	it	ne
 80009d2:	f040 0001 	orrne.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009dc:	d102      	bne.n	80009e4 <__cmpsf2+0x4c>
 80009de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80009e2:	d105      	bne.n	80009f0 <__cmpsf2+0x58>
 80009e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80009e8:	d1e4      	bne.n	80009b4 <__cmpsf2+0x1c>
 80009ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80009ee:	d0e1      	beq.n	80009b4 <__cmpsf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cfrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4608      	mov	r0, r1
 80009fc:	4661      	mov	r1, ip
 80009fe:	e7ff      	b.n	8000a00 <__aeabi_cfcmpeq>

08000a00 <__aeabi_cfcmpeq>:
 8000a00:	b50f      	push	{r0, r1, r2, r3, lr}
 8000a02:	f7ff ffc9 	bl	8000998 <__cmpsf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000a10 <__aeabi_fcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cfcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_fcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cfcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_fcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cfcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_fcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffd2 	bl	80009f8 <__aeabi_cfrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_fcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc8 	bl	80009f8 <__aeabi_cfrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <rotateRight.1>:


	    //funlcije koje ce rotirati elemente niza na osnovu pomeranja motora

	    // Funkcija za rotaciju niza u desno za određeni broj koraka
		void rotateRight(int arr[], int n, int steps) {
 8000a74:	b480      	push	{r7}
 8000a76:	b089      	sub	sp, #36	; 0x24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
 8000a80:	f8c7 c000 	str.w	ip, [r7]
		    int temp;
		    for (int i = 0; i < steps; ++i) {
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
 8000a88:	e025      	b.n	8000ad6 <rotateRight.1+0x62>
		        temp = arr[n - 1];
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000a90:	3b01      	subs	r3, #1
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	68fa      	ldr	r2, [r7, #12]
 8000a96:	4413      	add	r3, r2
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	617b      	str	r3, [r7, #20]
		        for (int j = n - 1; j > 0; --j) {
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	61bb      	str	r3, [r7, #24]
 8000aa2:	e00f      	b.n	8000ac4 <rotateRight.1+0x50>
		            arr[j] = arr[j - 1];
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	68fa      	ldr	r2, [r7, #12]
 8000ab0:	441a      	add	r2, r3
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	68f9      	ldr	r1, [r7, #12]
 8000ab8:	440b      	add	r3, r1
 8000aba:	6812      	ldr	r2, [r2, #0]
 8000abc:	601a      	str	r2, [r3, #0]
		        for (int j = n - 1; j > 0; --j) {
 8000abe:	69bb      	ldr	r3, [r7, #24]
 8000ac0:	3b01      	subs	r3, #1
 8000ac2:	61bb      	str	r3, [r7, #24]
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	dcec      	bgt.n	8000aa4 <rotateRight.1+0x30>
		        }
		        arr[0] = temp;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	697a      	ldr	r2, [r7, #20]
 8000ace:	601a      	str	r2, [r3, #0]
		    for (int i = 0; i < steps; ++i) {
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	61fb      	str	r3, [r7, #28]
 8000ad6:	69fa      	ldr	r2, [r7, #28]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	dbd5      	blt.n	8000a8a <rotateRight.1+0x16>
		    }
		}
 8000ade:	bf00      	nop
 8000ae0:	bf00      	nop
 8000ae2:	3724      	adds	r7, #36	; 0x24
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr
	...

08000aec <main>:
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b090      	sub	sp, #64	; 0x40
 8000af0:	af00      	add	r7, sp, #0
int main(void)
 8000af2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000af6:	607b      	str	r3, [r7, #4]
  HAL_Init();
 8000af8:	f000 fc72 	bl	80013e0 <HAL_Init>
  SystemClock_Config();
 8000afc:	f000 fa42 	bl	8000f84 <SystemClock_Config>
  MX_GPIO_Init();
 8000b00:	f000 face 	bl	80010a0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b04:	f000 fa8e 	bl	8001024 <MX_ADC1_Init>
	  HAL_ADC_Start(&hadc1);
 8000b08:	48ac      	ldr	r0, [pc, #688]	; (8000dbc <main+0x2d0>)
 8000b0a:	f000 fdc7 	bl	800169c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000b0e:	2164      	movs	r1, #100	; 0x64
 8000b10:	48aa      	ldr	r0, [pc, #680]	; (8000dbc <main+0x2d0>)
 8000b12:	f000 fe71 	bl	80017f8 <HAL_ADC_PollForConversion>
	  rez = HAL_ADC_GetValue(&hadc1);
 8000b16:	48a9      	ldr	r0, [pc, #676]	; (8000dbc <main+0x2d0>)
 8000b18:	f000 ff74 	bl	8001a04 <HAL_ADC_GetValue>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	4ba7      	ldr	r3, [pc, #668]	; (8000dc0 <main+0x2d4>)
 8000b22:	801a      	strh	r2, [r3, #0]
	  trenutna_temp = (1.5*rez/4096)*100;
 8000b24:	4ba6      	ldr	r3, [pc, #664]	; (8000dc0 <main+0x2d4>)
 8000b26:	881b      	ldrh	r3, [r3, #0]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff fc61 	bl	80003f0 <__aeabi_i2d>
 8000b2e:	f04f 0200 	mov.w	r2, #0
 8000b32:	4ba4      	ldr	r3, [pc, #656]	; (8000dc4 <main+0x2d8>)
 8000b34:	f7ff fcc6 	bl	80004c4 <__aeabi_dmul>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	460b      	mov	r3, r1
 8000b3c:	4610      	mov	r0, r2
 8000b3e:	4619      	mov	r1, r3
 8000b40:	f04f 0200 	mov.w	r2, #0
 8000b44:	4ba0      	ldr	r3, [pc, #640]	; (8000dc8 <main+0x2dc>)
 8000b46:	f7ff fde7 	bl	8000718 <__aeabi_ddiv>
 8000b4a:	4602      	mov	r2, r0
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	4610      	mov	r0, r2
 8000b50:	4619      	mov	r1, r3
 8000b52:	f04f 0200 	mov.w	r2, #0
 8000b56:	4b9d      	ldr	r3, [pc, #628]	; (8000dcc <main+0x2e0>)
 8000b58:	f7ff fcb4 	bl	80004c4 <__aeabi_dmul>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	460b      	mov	r3, r1
 8000b60:	4610      	mov	r0, r2
 8000b62:	4619      	mov	r1, r3
 8000b64:	f7ff fec0 	bl	80008e8 <__aeabi_d2f>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	4a99      	ldr	r2, [pc, #612]	; (8000dd0 <main+0x2e4>)
 8000b6c:	6013      	str	r3, [r2, #0]
	  while(trenutna_temp < zeljena_temp){
 8000b6e:	e048      	b.n	8000c02 <main+0x116>
		  for (int i = 0; i < pomeraj_epruvete; i++) {
 8000b70:	2300      	movs	r3, #0
 8000b72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000b74:	e022      	b.n	8000bbc <main+0xd0>
		      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // Enable
 8000b76:	2201      	movs	r2, #1
 8000b78:	2108      	movs	r1, #8
 8000b7a:	4896      	ldr	r0, [pc, #600]	; (8000dd4 <main+0x2e8>)
 8000b7c:	f001 fb42 	bl	8002204 <HAL_GPIO_WritePin>
		      HAL_Delay(0.000005); //Enable mora biti ispred Direction minimalno 5µs
 8000b80:	2000      	movs	r0, #0
 8000b82:	f000 fc8f 	bl	80014a4 <HAL_Delay>
		      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET); // Direction=1, smer kazaljke
 8000b86:	2201      	movs	r2, #1
 8000b88:	2104      	movs	r1, #4
 8000b8a:	4892      	ldr	r0, [pc, #584]	; (8000dd4 <main+0x2e8>)
 8000b8c:	f001 fb3a 	bl	8002204 <HAL_GPIO_WritePin>
		      HAL_Delay(0.000005); //Direction mora biti ispred Impulsa minimalno 5µs
 8000b90:	2000      	movs	r0, #0
 8000b92:	f000 fc87 	bl	80014a4 <HAL_Delay>
		      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // Impulse
 8000b96:	2201      	movs	r2, #1
 8000b98:	2102      	movs	r1, #2
 8000b9a:	488e      	ldr	r0, [pc, #568]	; (8000dd4 <main+0x2e8>)
 8000b9c:	f001 fb32 	bl	8002204 <HAL_GPIO_WritePin>
		      HAL_Delay(0.0000025); //Minimalna sirina visokog nivoa ne sme biti manja od 2.5µs
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f000 fc7f 	bl	80014a4 <HAL_Delay>
		      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // Impulse
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2102      	movs	r1, #2
 8000baa:	488a      	ldr	r0, [pc, #552]	; (8000dd4 <main+0x2e8>)
 8000bac:	f001 fb2a 	bl	8002204 <HAL_GPIO_WritePin>
		      HAL_Delay(0.0000025); //Minimalna sirina niskog nivoa ne sme biti manja od 2.5µs
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	f000 fc77 	bl	80014a4 <HAL_Delay>
		  for (int i = 0; i < pomeraj_epruvete; i++) {
 8000bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bb8:	3301      	adds	r3, #1
 8000bba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000bbc:	4b86      	ldr	r3, [pc, #536]	; (8000dd8 <main+0x2ec>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	dbd7      	blt.n	8000b76 <main+0x8a>
	        int temp = epruvete[velicina_niza - 1];
 8000bc6:	4b85      	ldr	r3, [pc, #532]	; (8000ddc <main+0x2f0>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	4a84      	ldr	r2, [pc, #528]	; (8000de0 <main+0x2f4>)
 8000bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd2:	60bb      	str	r3, [r7, #8]
	        for (int i = velicina_niza - 1; i > 0; i--) {
 8000bd4:	4b81      	ldr	r3, [pc, #516]	; (8000ddc <main+0x2f0>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	63bb      	str	r3, [r7, #56]	; 0x38
 8000bdc:	e00b      	b.n	8000bf6 <main+0x10a>
	        	epruvete[i] = epruvete[i - 1];
 8000bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000be0:	3b01      	subs	r3, #1
 8000be2:	4a7f      	ldr	r2, [pc, #508]	; (8000de0 <main+0x2f4>)
 8000be4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000be8:	497d      	ldr	r1, [pc, #500]	; (8000de0 <main+0x2f4>)
 8000bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	        for (int i = velicina_niza - 1; i > 0; i--) {
 8000bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	63bb      	str	r3, [r7, #56]	; 0x38
 8000bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	dcf0      	bgt.n	8000bde <main+0xf2>
	        epruvete[0] = temp;
 8000bfc:	4a78      	ldr	r2, [pc, #480]	; (8000de0 <main+0x2f4>)
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	6013      	str	r3, [r2, #0]
	  while(trenutna_temp < zeljena_temp){
 8000c02:	4b73      	ldr	r3, [pc, #460]	; (8000dd0 <main+0x2e4>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a77      	ldr	r2, [pc, #476]	; (8000de4 <main+0x2f8>)
 8000c08:	6812      	ldr	r2, [r2, #0]
 8000c0a:	4611      	mov	r1, r2
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff ff09 	bl	8000a24 <__aeabi_fcmplt>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d1ab      	bne.n	8000b70 <main+0x84>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); //
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2108      	movs	r1, #8
 8000c1c:	486d      	ldr	r0, [pc, #436]	; (8000dd4 <main+0x2e8>)
 8000c1e:	f001 faf1 	bl	8002204 <HAL_GPIO_WritePin>
	  int uneti_broj = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
	  int indeks_pocetak = -1;
 8000c26:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2a:	637b      	str	r3, [r7, #52]	; 0x34
	  int indeks_kraj = -1;
 8000c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c30:	633b      	str	r3, [r7, #48]	; 0x30
	    for (int i = 0; i < velicina_niza; ++i) {
 8000c32:	2300      	movs	r3, #0
 8000c34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c36:	e00c      	b.n	8000c52 <main+0x166>
	        if (epruvete[i] == uneti_broj) {
 8000c38:	4a69      	ldr	r2, [pc, #420]	; (8000de0 <main+0x2f4>)
 8000c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c40:	68fa      	ldr	r2, [r7, #12]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d102      	bne.n	8000c4c <main+0x160>
	            indeks_pocetak = i;
 8000c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c48:	637b      	str	r3, [r7, #52]	; 0x34
	            break;
 8000c4a:	e007      	b.n	8000c5c <main+0x170>
	    for (int i = 0; i < velicina_niza; ++i) {
 8000c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c4e:	3301      	adds	r3, #1
 8000c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c52:	4b62      	ldr	r3, [pc, #392]	; (8000ddc <main+0x2f0>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	dbed      	blt.n	8000c38 <main+0x14c>
	    int k = 1;  // Pomeranje indeksa od desne strane
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
	    for (int i = velicina_niza - 1; i >= 0; --i) {
 8000c60:	4b5e      	ldr	r3, [pc, #376]	; (8000ddc <main+0x2f0>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	3b01      	subs	r3, #1
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
 8000c68:	e00f      	b.n	8000c8a <main+0x19e>
	        if (epruvete[i] == uneti_broj) {
 8000c6a:	4a5d      	ldr	r2, [pc, #372]	; (8000de0 <main+0x2f4>)
 8000c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d102      	bne.n	8000c7e <main+0x192>
	            indeks_kraj = k;
 8000c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c7a:	633b      	str	r3, [r7, #48]	; 0x30
	            break;
 8000c7c:	e008      	b.n	8000c90 <main+0x1a4>
	        k++;
 8000c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c80:	3301      	adds	r3, #1
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
	    for (int i = velicina_niza - 1; i >= 0; --i) {
 8000c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c86:	3b01      	subs	r3, #1
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
 8000c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	daec      	bge.n	8000c6a <main+0x17e>
		    }
		}


	    // Ispis rezultata
	    if (indeks_pocetak != -1 && indeks_kraj != -1) {
 8000c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c96:	f000 80c1 	beq.w	8000e1c <main+0x330>
 8000c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca0:	f000 80bc 	beq.w	8000e1c <main+0x330>
	        if (indeks_pocetak <= indeks_kraj) {
 8000ca4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	dc40      	bgt.n	8000d2e <main+0x242>
	            printf("Motor 1 se okreće u desno za %d koraka\n", indeks_pocetak);
 8000cac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000cae:	484e      	ldr	r0, [pc, #312]	; (8000de8 <main+0x2fc>)
 8000cb0:	f002 f8ea 	bl	8002e88 <iprintf>
	            //za pomeraj epruvete za 1 korak potrebno je dovesti 14 impulsa, okrece se u desno
	            for (int i = 0; i < pomeraj_epruvete * indeks_pocetak ; i++) {
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	623b      	str	r3, [r7, #32]
 8000cb8:	e022      	b.n	8000d00 <main+0x214>
	  		         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // Enable
 8000cba:	2201      	movs	r2, #1
 8000cbc:	2108      	movs	r1, #8
 8000cbe:	4845      	ldr	r0, [pc, #276]	; (8000dd4 <main+0x2e8>)
 8000cc0:	f001 faa0 	bl	8002204 <HAL_GPIO_WritePin>
	  		         HAL_Delay(0.000005); //Enable mora biti ispred Direction minimalno 5µs
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f000 fbed 	bl	80014a4 <HAL_Delay>
	  		         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET); // Direction=1, motor se okrece u desno
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2104      	movs	r1, #4
 8000cce:	4841      	ldr	r0, [pc, #260]	; (8000dd4 <main+0x2e8>)
 8000cd0:	f001 fa98 	bl	8002204 <HAL_GPIO_WritePin>
	  		         HAL_Delay(0.000005); //Direction mora biti ispred Impulsa minimalno 5µs
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	f000 fbe5 	bl	80014a4 <HAL_Delay>
	  		         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // Impulse
 8000cda:	2201      	movs	r2, #1
 8000cdc:	2102      	movs	r1, #2
 8000cde:	483d      	ldr	r0, [pc, #244]	; (8000dd4 <main+0x2e8>)
 8000ce0:	f001 fa90 	bl	8002204 <HAL_GPIO_WritePin>
	  		         HAL_Delay(0.0000025); //Minimalna sirina visokog nivoa ne sme biti manja od 2.5µs
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f000 fbdd 	bl	80014a4 <HAL_Delay>
	  		         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // Impulse
 8000cea:	2200      	movs	r2, #0
 8000cec:	2102      	movs	r1, #2
 8000cee:	4839      	ldr	r0, [pc, #228]	; (8000dd4 <main+0x2e8>)
 8000cf0:	f001 fa88 	bl	8002204 <HAL_GPIO_WritePin>
	  		         HAL_Delay(0.0000025); //Minimalna sirina niskog nivoa ne sme biti manja od 2.5µs
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f000 fbd5 	bl	80014a4 <HAL_Delay>
	            for (int i = 0; i < pomeraj_epruvete * indeks_pocetak ; i++) {
 8000cfa:	6a3b      	ldr	r3, [r7, #32]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	623b      	str	r3, [r7, #32]
 8000d00:	4b35      	ldr	r3, [pc, #212]	; (8000dd8 <main+0x2ec>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d06:	fb02 f303 	mul.w	r3, r2, r3
 8000d0a:	6a3a      	ldr	r2, [r7, #32]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	dbd4      	blt.n	8000cba <main+0x1ce>
	            }
	        //Motor 1 se okrenuo udesno potreban broj impulsa i doveo je epruvetu na zeljeno mesto
	        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2108      	movs	r1, #8
 8000d14:	482f      	ldr	r0, [pc, #188]	; (8000dd4 <main+0x2e8>)
 8000d16:	f001 fa75 	bl	8002204 <HAL_GPIO_WritePin>
	        //stanje epruveta(niza) nakon okretanja motora
	        rotateLeft(epruvete, velicina_niza, indeks_pocetak);
 8000d1a:	4b30      	ldr	r3, [pc, #192]	; (8000ddc <main+0x2f0>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	1d3a      	adds	r2, r7, #4
 8000d20:	4694      	mov	ip, r2
 8000d22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d24:	4619      	mov	r1, r3
 8000d26:	482e      	ldr	r0, [pc, #184]	; (8000de0 <main+0x2f4>)
 8000d28:	f000 f8f2 	bl	8000f10 <rotateLeft.0>
 8000d2c:	e03f      	b.n	8000dae <main+0x2c2>

	        } else {
	            printf("Motor 1 se okreće u levo za %d koraka\n", indeks_kraj);
 8000d2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000d30:	482e      	ldr	r0, [pc, #184]	; (8000dec <main+0x300>)
 8000d32:	f002 f8a9 	bl	8002e88 <iprintf>
	            //za pomeraj epruvete za 1 korak potrebno je dovesti 14 impulsa, okrece se u levo
	            for (int i = 0; i < pomeraj_epruvete * indeks_kraj ; i++) {
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
 8000d3a:	e022      	b.n	8000d82 <main+0x296>
	  		         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // Enable
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	2108      	movs	r1, #8
 8000d40:	4824      	ldr	r0, [pc, #144]	; (8000dd4 <main+0x2e8>)
 8000d42:	f001 fa5f 	bl	8002204 <HAL_GPIO_WritePin>
	  		         HAL_Delay(0.000005); //Enable mora biti ispred Direction minimalno 5µs
 8000d46:	2000      	movs	r0, #0
 8000d48:	f000 fbac 	bl	80014a4 <HAL_Delay>
	  		         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); // Direction=0, motor se okrece u levo
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2104      	movs	r1, #4
 8000d50:	4820      	ldr	r0, [pc, #128]	; (8000dd4 <main+0x2e8>)
 8000d52:	f001 fa57 	bl	8002204 <HAL_GPIO_WritePin>
	  		         HAL_Delay(0.000005); //Direction mora biti ispred Impulsa minimalno 5µs
 8000d56:	2000      	movs	r0, #0
 8000d58:	f000 fba4 	bl	80014a4 <HAL_Delay>
	  		         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // Impulse
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	2102      	movs	r1, #2
 8000d60:	481c      	ldr	r0, [pc, #112]	; (8000dd4 <main+0x2e8>)
 8000d62:	f001 fa4f 	bl	8002204 <HAL_GPIO_WritePin>
	  		         HAL_Delay(0.0000025); //Minimalna sirina visokog nivoa ne sme biti manja od 2.5µs
 8000d66:	2000      	movs	r0, #0
 8000d68:	f000 fb9c 	bl	80014a4 <HAL_Delay>
	  		         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // Impulse
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2102      	movs	r1, #2
 8000d70:	4818      	ldr	r0, [pc, #96]	; (8000dd4 <main+0x2e8>)
 8000d72:	f001 fa47 	bl	8002204 <HAL_GPIO_WritePin>
	  		         HAL_Delay(0.0000025); //Minimalna sirina niskog nivoa ne sme biti manja od 2.5µs
 8000d76:	2000      	movs	r0, #0
 8000d78:	f000 fb94 	bl	80014a4 <HAL_Delay>
	            for (int i = 0; i < pomeraj_epruvete * indeks_kraj ; i++) {
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	61fb      	str	r3, [r7, #28]
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <main+0x2ec>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d88:	fb02 f303 	mul.w	r3, r2, r3
 8000d8c:	69fa      	ldr	r2, [r7, #28]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	dbd4      	blt.n	8000d3c <main+0x250>
	       	    }
	        //Motor 1 se okrenuo ulevo potreban broj impulsa i doveo je epruvetu na zeljeno mesto
	        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2108      	movs	r1, #8
 8000d96:	480f      	ldr	r0, [pc, #60]	; (8000dd4 <main+0x2e8>)
 8000d98:	f001 fa34 	bl	8002204 <HAL_GPIO_WritePin>
	        //stanje epruveta(niza) nakon okretanja motora
	        rotateRight(epruvete, velicina_niza, indeks_kraj);
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <main+0x2f0>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	1d3a      	adds	r2, r7, #4
 8000da2:	4694      	mov	ip, r2
 8000da4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000da6:	4619      	mov	r1, r3
 8000da8:	480d      	ldr	r0, [pc, #52]	; (8000de0 <main+0x2f4>)
 8000daa:	f7ff fe63 	bl	8000a74 <rotateRight.1>
	        }

	        // Ispis niza nakon pomeranja
	        printf("Niz nakon pomeranja: ");
 8000dae:	4810      	ldr	r0, [pc, #64]	; (8000df0 <main+0x304>)
 8000db0:	f002 f86a 	bl	8002e88 <iprintf>
	        for (int i = 0; i < velicina_niza; ++i) {
 8000db4:	2300      	movs	r3, #0
 8000db6:	61bb      	str	r3, [r7, #24]
 8000db8:	e027      	b.n	8000e0a <main+0x31e>
 8000dba:	bf00      	nop
 8000dbc:	20000114 	.word	0x20000114
 8000dc0:	20000110 	.word	0x20000110
 8000dc4:	3ff80000 	.word	0x3ff80000
 8000dc8:	40b00000 	.word	0x40b00000
 8000dcc:	40590000 	.word	0x40590000
 8000dd0:	2000010c 	.word	0x2000010c
 8000dd4:	40010c00 	.word	0x40010c00
 8000dd8:	20000048 	.word	0x20000048
 8000ddc:	2000003c 	.word	0x2000003c
 8000de0:	20000004 	.word	0x20000004
 8000de4:	20000000 	.word	0x20000000
 8000de8:	08003c14 	.word	0x08003c14
 8000dec:	08003c40 	.word	0x08003c40
 8000df0:	08003c68 	.word	0x08003c68
	            printf("%d ", epruvete[i]);
 8000df4:	4a3b      	ldr	r2, [pc, #236]	; (8000ee4 <main+0x3f8>)
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	483a      	ldr	r0, [pc, #232]	; (8000ee8 <main+0x3fc>)
 8000e00:	f002 f842 	bl	8002e88 <iprintf>
	        for (int i = 0; i < velicina_niza; ++i) {
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	3301      	adds	r3, #1
 8000e08:	61bb      	str	r3, [r7, #24]
 8000e0a:	4b38      	ldr	r3, [pc, #224]	; (8000eec <main+0x400>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	dbef      	blt.n	8000df4 <main+0x308>
	        }
	        printf("\n");
 8000e14:	200a      	movs	r0, #10
 8000e16:	f002 f849 	bl	8002eac <putchar>
	    if (indeks_pocetak != -1 && indeks_kraj != -1) {
 8000e1a:	e003      	b.n	8000e24 <main+0x338>

	    } else {
	        printf("Broj %d nije pronađen u nizu.\n", uneti_broj);
 8000e1c:	68f9      	ldr	r1, [r7, #12]
 8000e1e:	4834      	ldr	r0, [pc, #208]	; (8000ef0 <main+0x404>)
 8000e20:	f002 f832 	bl	8002e88 <iprintf>
	    //pokretanje Motora 2, koji ima zadatak da pomera traku
	    /*Da bi se motor okrenuo za jedan korak potrebno mu je 14 step signala
	     * posto je traka 50mm a jedan korak okrene traku za 5mm
	     * potrebno je da se napravi 50/5 koraka  * 14 step signala
	     */
	    for (int i = 0; i < pomeraj_epruvete*(pokretna_traka/pomeraj_trake) ; i++) {
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
 8000e28:	e022      	b.n	8000e70 <main+0x384>
		       HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // Enable
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2140      	movs	r1, #64	; 0x40
 8000e2e:	4831      	ldr	r0, [pc, #196]	; (8000ef4 <main+0x408>)
 8000e30:	f001 f9e8 	bl	8002204 <HAL_GPIO_WritePin>
		       HAL_Delay(0.000005); //Enable mora biti ispred Direction minimalno 5µs
 8000e34:	2000      	movs	r0, #0
 8000e36:	f000 fb35 	bl	80014a4 <HAL_Delay>
		       HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); // Direction=1, pretpostavka da traka okretanjem u desno prenosi epruvete
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	2120      	movs	r1, #32
 8000e3e:	482d      	ldr	r0, [pc, #180]	; (8000ef4 <main+0x408>)
 8000e40:	f001 f9e0 	bl	8002204 <HAL_GPIO_WritePin>
	           HAL_Delay(0.000005); //Direction mora biti ispred Impulsa minimalno 5µs
 8000e44:	2000      	movs	r0, #0
 8000e46:	f000 fb2d 	bl	80014a4 <HAL_Delay>
		       HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // Impulse
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	2110      	movs	r1, #16
 8000e4e:	4829      	ldr	r0, [pc, #164]	; (8000ef4 <main+0x408>)
 8000e50:	f001 f9d8 	bl	8002204 <HAL_GPIO_WritePin>
		       HAL_Delay(0.0000025); //Minimalna sirina visokog nivoa ne sme biti manja od 2.5µs
 8000e54:	2000      	movs	r0, #0
 8000e56:	f000 fb25 	bl	80014a4 <HAL_Delay>
		       HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // Impulse
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2110      	movs	r1, #16
 8000e5e:	4825      	ldr	r0, [pc, #148]	; (8000ef4 <main+0x408>)
 8000e60:	f001 f9d0 	bl	8002204 <HAL_GPIO_WritePin>
		       HAL_Delay(0.0000025); //Minimalna sirina niskog nivoa ne sme biti manja od 2.5µs
 8000e64:	2000      	movs	r0, #0
 8000e66:	f000 fb1d 	bl	80014a4 <HAL_Delay>
	    for (int i = 0; i < pomeraj_epruvete*(pokretna_traka/pomeraj_trake) ; i++) {
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	4b21      	ldr	r3, [pc, #132]	; (8000ef8 <main+0x40c>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	4b21      	ldr	r3, [pc, #132]	; (8000efc <main+0x410>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e7c:	4a20      	ldr	r2, [pc, #128]	; (8000f00 <main+0x414>)
 8000e7e:	6812      	ldr	r2, [r2, #0]
 8000e80:	fb02 f303 	mul.w	r3, r2, r3
 8000e84:	697a      	ldr	r2, [r7, #20]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	dbcf      	blt.n	8000e2a <main+0x33e>
	    }
	           HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Zaustavljamo Moror2
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2140      	movs	r1, #64	; 0x40
 8000e8e:	4819      	ldr	r0, [pc, #100]	; (8000ef4 <main+0x408>)
 8000e90:	f001 f9b8 	bl	8002204 <HAL_GPIO_WritePin>

	           // Premestanje nultog elementa u kutiju
	           kutija[brojac_kutija] = epruvete[0];
 8000e94:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <main+0x418>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a12      	ldr	r2, [pc, #72]	; (8000ee4 <main+0x3f8>)
 8000e9a:	6812      	ldr	r2, [r2, #0]
 8000e9c:	491a      	ldr	r1, [pc, #104]	; (8000f08 <main+0x41c>)
 8000e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	           brojac_kutija++;
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <main+0x418>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	4a16      	ldr	r2, [pc, #88]	; (8000f04 <main+0x418>)
 8000eaa:	6013      	str	r3, [r2, #0]

	           // Postavljanje vrednosti 404 na mesto nultog elementa
	           epruvete[0] = 404;
 8000eac:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <main+0x3f8>)
 8000eae:	f44f 72ca 	mov.w	r2, #404	; 0x194
 8000eb2:	601a      	str	r2, [r3, #0]

	           // Prikazivanje elemenata u kutiji
	           printf("\nElementi u kutiji: ");
 8000eb4:	4815      	ldr	r0, [pc, #84]	; (8000f0c <main+0x420>)
 8000eb6:	f001 ffe7 	bl	8002e88 <iprintf>
	           for (int i = 0; i < brojac_kutija; i++) {
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	e00a      	b.n	8000ed6 <main+0x3ea>
	               printf("%d ", kutija[i]);
 8000ec0:	4a11      	ldr	r2, [pc, #68]	; (8000f08 <main+0x41c>)
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4807      	ldr	r0, [pc, #28]	; (8000ee8 <main+0x3fc>)
 8000ecc:	f001 ffdc 	bl	8002e88 <iprintf>
	           for (int i = 0; i < brojac_kutija; i++) {
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <main+0x418>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	dbef      	blt.n	8000ec0 <main+0x3d4>
  {
 8000ee0:	e612      	b.n	8000b08 <main+0x1c>
 8000ee2:	bf00      	nop
 8000ee4:	20000004 	.word	0x20000004
 8000ee8:	08003c80 	.word	0x08003c80
 8000eec:	2000003c 	.word	0x2000003c
 8000ef0:	08003c84 	.word	0x08003c84
 8000ef4:	40010c00 	.word	0x40010c00
 8000ef8:	20000040 	.word	0x20000040
 8000efc:	20000044 	.word	0x20000044
 8000f00:	20000048 	.word	0x20000048
 8000f04:	20000108 	.word	0x20000108
 8000f08:	200000d0 	.word	0x200000d0
 8000f0c:	08003ca4 	.word	0x08003ca4

08000f10 <rotateLeft.0>:
		void rotateLeft(int arr[], int n, int steps) {
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
 8000f1c:	f8c7 c000 	str.w	ip, [r7]
		    for (int i = 0; i < steps; ++i) {
 8000f20:	2300      	movs	r3, #0
 8000f22:	61fb      	str	r3, [r7, #28]
 8000f24:	e024      	b.n	8000f70 <rotateLeft.0+0x60>
		        temp = arr[0];
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	617b      	str	r3, [r7, #20]
		        for (int j = 0; j < n - 1; ++j) {
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61bb      	str	r3, [r7, #24]
 8000f30:	e00d      	b.n	8000f4e <rotateLeft.0+0x3e>
		            arr[j] = arr[j + 1];
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	3301      	adds	r3, #1
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	68fa      	ldr	r2, [r7, #12]
 8000f3a:	441a      	add	r2, r3
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	68f9      	ldr	r1, [r7, #12]
 8000f42:	440b      	add	r3, r1
 8000f44:	6812      	ldr	r2, [r2, #0]
 8000f46:	601a      	str	r2, [r3, #0]
		        for (int j = 0; j < n - 1; ++j) {
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	61bb      	str	r3, [r7, #24]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	3b01      	subs	r3, #1
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	dbec      	blt.n	8000f32 <rotateLeft.0+0x22>
		        arr[n - 1] = temp;
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	4413      	add	r3, r2
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	601a      	str	r2, [r3, #0]
		    for (int i = 0; i < steps; ++i) {
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	61fb      	str	r3, [r7, #28]
 8000f70:	69fa      	ldr	r2, [r7, #28]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	dbd6      	blt.n	8000f26 <rotateLeft.0+0x16>
		}
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	3724      	adds	r7, #36	; 0x24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr

08000f84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b094      	sub	sp, #80	; 0x50
 8000f88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f8e:	2228      	movs	r2, #40	; 0x28
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f001 ffd5 	bl	8002f42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa8:	1d3b      	adds	r3, r7, #4
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fbc:	2310      	movs	r3, #16
 8000fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f001 f933 	bl	8002234 <HAL_RCC_OscConfig>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000fd4:	f000 f8ae 	bl	8001134 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd8:	230f      	movs	r3, #15
 8000fda:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f001 fba0 	bl	8002738 <HAL_RCC_ClockConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000ffe:	f000 f899 	bl	8001134 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001002:	2302      	movs	r3, #2
 8001004:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	4618      	mov	r0, r3
 800100e:	f001 fd0d 	bl	8002a2c <HAL_RCCEx_PeriphCLKConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001018:	f000 f88c 	bl	8001134 <Error_Handler>
  }
}
 800101c:	bf00      	nop
 800101e:	3750      	adds	r7, #80	; 0x50
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001034:	4b18      	ldr	r3, [pc, #96]	; (8001098 <MX_ADC1_Init+0x74>)
 8001036:	4a19      	ldr	r2, [pc, #100]	; (800109c <MX_ADC1_Init+0x78>)
 8001038:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800103a:	4b17      	ldr	r3, [pc, #92]	; (8001098 <MX_ADC1_Init+0x74>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001040:	4b15      	ldr	r3, [pc, #84]	; (8001098 <MX_ADC1_Init+0x74>)
 8001042:	2201      	movs	r2, #1
 8001044:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001046:	4b14      	ldr	r3, [pc, #80]	; (8001098 <MX_ADC1_Init+0x74>)
 8001048:	2200      	movs	r2, #0
 800104a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <MX_ADC1_Init+0x74>)
 800104e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001052:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001054:	4b10      	ldr	r3, [pc, #64]	; (8001098 <MX_ADC1_Init+0x74>)
 8001056:	2200      	movs	r2, #0
 8001058:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800105a:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <MX_ADC1_Init+0x74>)
 800105c:	2201      	movs	r2, #1
 800105e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001060:	480d      	ldr	r0, [pc, #52]	; (8001098 <MX_ADC1_Init+0x74>)
 8001062:	f000 fa43 	bl	80014ec <HAL_ADC_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800106c:	f000 f862 	bl	8001134 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001070:	2301      	movs	r3, #1
 8001072:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001074:	2301      	movs	r3, #1
 8001076:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	4619      	mov	r1, r3
 8001080:	4805      	ldr	r0, [pc, #20]	; (8001098 <MX_ADC1_Init+0x74>)
 8001082:	f000 fccb 	bl	8001a1c <HAL_ADC_ConfigChannel>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800108c:	f000 f852 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001090:	bf00      	nop
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000114 	.word	0x20000114
 800109c:	40012400 	.word	0x40012400

080010a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a6:	f107 0310 	add.w	r3, r7, #16
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b4:	4b1d      	ldr	r3, [pc, #116]	; (800112c <MX_GPIO_Init+0x8c>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a1c      	ldr	r2, [pc, #112]	; (800112c <MX_GPIO_Init+0x8c>)
 80010ba:	f043 0320 	orr.w	r3, r3, #32
 80010be:	6193      	str	r3, [r2, #24]
 80010c0:	4b1a      	ldr	r3, [pc, #104]	; (800112c <MX_GPIO_Init+0x8c>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f003 0320 	and.w	r3, r3, #32
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010cc:	4b17      	ldr	r3, [pc, #92]	; (800112c <MX_GPIO_Init+0x8c>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4a16      	ldr	r2, [pc, #88]	; (800112c <MX_GPIO_Init+0x8c>)
 80010d2:	f043 0304 	orr.w	r3, r3, #4
 80010d6:	6193      	str	r3, [r2, #24]
 80010d8:	4b14      	ldr	r3, [pc, #80]	; (800112c <MX_GPIO_Init+0x8c>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <MX_GPIO_Init+0x8c>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	4a10      	ldr	r2, [pc, #64]	; (800112c <MX_GPIO_Init+0x8c>)
 80010ea:	f043 0308 	orr.w	r3, r3, #8
 80010ee:	6193      	str	r3, [r2, #24]
 80010f0:	4b0e      	ldr	r3, [pc, #56]	; (800112c <MX_GPIO_Init+0x8c>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	f003 0308 	and.w	r3, r3, #8
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80010fc:	2200      	movs	r2, #0
 80010fe:	21fe      	movs	r1, #254	; 0xfe
 8001100:	480b      	ldr	r0, [pc, #44]	; (8001130 <MX_GPIO_Init+0x90>)
 8001102:	f001 f87f 	bl	8002204 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB1 PB2 PB3 PB4
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001106:	23fe      	movs	r3, #254	; 0xfe
 8001108:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	2301      	movs	r3, #1
 800110c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2302      	movs	r3, #2
 8001114:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001116:	f107 0310 	add.w	r3, r7, #16
 800111a:	4619      	mov	r1, r3
 800111c:	4804      	ldr	r0, [pc, #16]	; (8001130 <MX_GPIO_Init+0x90>)
 800111e:	f000 fef5 	bl	8001f0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001122:	bf00      	nop
 8001124:	3720      	adds	r7, #32
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40021000 	.word	0x40021000
 8001130:	40010c00 	.word	0x40010c00

08001134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001138:	b672      	cpsid	i
}
 800113a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800113c:	e7fe      	b.n	800113c <Error_Handler+0x8>
	...

08001140 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <HAL_MspInit+0x40>)
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	4a0d      	ldr	r2, [pc, #52]	; (8001180 <HAL_MspInit+0x40>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6193      	str	r3, [r2, #24]
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <HAL_MspInit+0x40>)
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800115e:	4b08      	ldr	r3, [pc, #32]	; (8001180 <HAL_MspInit+0x40>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	4a07      	ldr	r2, [pc, #28]	; (8001180 <HAL_MspInit+0x40>)
 8001164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001168:	61d3      	str	r3, [r2, #28]
 800116a:	4b05      	ldr	r3, [pc, #20]	; (8001180 <HAL_MspInit+0x40>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001172:	603b      	str	r3, [r7, #0]
 8001174:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	40021000 	.word	0x40021000

08001184 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b088      	sub	sp, #32
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a14      	ldr	r2, [pc, #80]	; (80011f0 <HAL_ADC_MspInit+0x6c>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d121      	bne.n	80011e8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011a4:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <HAL_ADC_MspInit+0x70>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	4a12      	ldr	r2, [pc, #72]	; (80011f4 <HAL_ADC_MspInit+0x70>)
 80011aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ae:	6193      	str	r3, [r2, #24]
 80011b0:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <HAL_ADC_MspInit+0x70>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011bc:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <HAL_ADC_MspInit+0x70>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	4a0c      	ldr	r2, [pc, #48]	; (80011f4 <HAL_ADC_MspInit+0x70>)
 80011c2:	f043 0304 	orr.w	r3, r3, #4
 80011c6:	6193      	str	r3, [r2, #24]
 80011c8:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <HAL_ADC_MspInit+0x70>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011d4:	2302      	movs	r3, #2
 80011d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011d8:	2303      	movs	r3, #3
 80011da:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	4619      	mov	r1, r3
 80011e2:	4805      	ldr	r0, [pc, #20]	; (80011f8 <HAL_ADC_MspInit+0x74>)
 80011e4:	f000 fe92 	bl	8001f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011e8:	bf00      	nop
 80011ea:	3720      	adds	r7, #32
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40012400 	.word	0x40012400
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40010800 	.word	0x40010800

080011fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <NMI_Handler+0x4>

08001202 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001206:	e7fe      	b.n	8001206 <HardFault_Handler+0x4>

08001208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800120c:	e7fe      	b.n	800120c <MemManage_Handler+0x4>

0800120e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001212:	e7fe      	b.n	8001212 <BusFault_Handler+0x4>

08001214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001218:	e7fe      	b.n	8001218 <UsageFault_Handler+0x4>

0800121a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr

08001226 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr

08001232 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr

0800123e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001242:	f000 f913 	bl	800146c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}

0800124a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	60f8      	str	r0, [r7, #12]
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
 800125a:	e00a      	b.n	8001272 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800125c:	f3af 8000 	nop.w
 8001260:	4601      	mov	r1, r0
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	1c5a      	adds	r2, r3, #1
 8001266:	60ba      	str	r2, [r7, #8]
 8001268:	b2ca      	uxtb	r2, r1
 800126a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	3301      	adds	r3, #1
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	429a      	cmp	r2, r3
 8001278:	dbf0      	blt.n	800125c <_read+0x12>
  }

  return len;
 800127a:	687b      	ldr	r3, [r7, #4]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	e009      	b.n	80012aa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	1c5a      	adds	r2, r3, #1
 800129a:	60ba      	str	r2, [r7, #8]
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	3301      	adds	r3, #1
 80012a8:	617b      	str	r3, [r7, #20]
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	dbf1      	blt.n	8001296 <_write+0x12>
  }
  return len;
 80012b2:	687b      	ldr	r3, [r7, #4]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <_close>:

int _close(int file)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr

080012d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012e2:	605a      	str	r2, [r3, #4]
  return 0;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr

080012f0 <_isatty>:

int _isatty(int file)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012f8:	2301      	movs	r3, #1
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr

08001304 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr

0800131c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001324:	4a14      	ldr	r2, [pc, #80]	; (8001378 <_sbrk+0x5c>)
 8001326:	4b15      	ldr	r3, [pc, #84]	; (800137c <_sbrk+0x60>)
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001330:	4b13      	ldr	r3, [pc, #76]	; (8001380 <_sbrk+0x64>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d102      	bne.n	800133e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <_sbrk+0x64>)
 800133a:	4a12      	ldr	r2, [pc, #72]	; (8001384 <_sbrk+0x68>)
 800133c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <_sbrk+0x64>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4413      	add	r3, r2
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	429a      	cmp	r2, r3
 800134a:	d207      	bcs.n	800135c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800134c:	f001 fe48 	bl	8002fe0 <__errno>
 8001350:	4603      	mov	r3, r0
 8001352:	220c      	movs	r2, #12
 8001354:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
 800135a:	e009      	b.n	8001370 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <_sbrk+0x64>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001362:	4b07      	ldr	r3, [pc, #28]	; (8001380 <_sbrk+0x64>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4413      	add	r3, r2
 800136a:	4a05      	ldr	r2, [pc, #20]	; (8001380 <_sbrk+0x64>)
 800136c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800136e:	68fb      	ldr	r3, [r7, #12]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20002800 	.word	0x20002800
 800137c:	00000400 	.word	0x00000400
 8001380:	20000144 	.word	0x20000144
 8001384:	20000298 	.word	0x20000298

08001388 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr

08001394 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001394:	f7ff fff8 	bl	8001388 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001398:	480b      	ldr	r0, [pc, #44]	; (80013c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800139a:	490c      	ldr	r1, [pc, #48]	; (80013cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800139c:	4a0c      	ldr	r2, [pc, #48]	; (80013d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800139e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a0:	e002      	b.n	80013a8 <LoopCopyDataInit>

080013a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013a6:	3304      	adds	r3, #4

080013a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013ac:	d3f9      	bcc.n	80013a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ae:	4a09      	ldr	r2, [pc, #36]	; (80013d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013b0:	4c09      	ldr	r4, [pc, #36]	; (80013d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b4:	e001      	b.n	80013ba <LoopFillZerobss>

080013b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b8:	3204      	adds	r2, #4

080013ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013bc:	d3fb      	bcc.n	80013b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013be:	f001 fe15 	bl	8002fec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013c2:	f7ff fb93 	bl	8000aec <main>
  bx lr
 80013c6:	4770      	bx	lr
  ldr r0, =_sdata
 80013c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013cc:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 80013d0:	08003d38 	.word	0x08003d38
  ldr r2, =_sbss
 80013d4:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 80013d8:	20000298 	.word	0x20000298

080013dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013dc:	e7fe      	b.n	80013dc <ADC1_2_IRQHandler>
	...

080013e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <HAL_Init+0x28>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a07      	ldr	r2, [pc, #28]	; (8001408 <HAL_Init+0x28>)
 80013ea:	f043 0310 	orr.w	r3, r3, #16
 80013ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f0:	2003      	movs	r0, #3
 80013f2:	f000 fd57 	bl	8001ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013f6:	200f      	movs	r0, #15
 80013f8:	f000 f808 	bl	800140c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013fc:	f7ff fea0 	bl	8001140 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40022000 	.word	0x40022000

0800140c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001414:	4b12      	ldr	r3, [pc, #72]	; (8001460 <HAL_InitTick+0x54>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_InitTick+0x58>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	4619      	mov	r1, r3
 800141e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001422:	fbb3 f3f1 	udiv	r3, r3, r1
 8001426:	fbb2 f3f3 	udiv	r3, r2, r3
 800142a:	4618      	mov	r0, r3
 800142c:	f000 fd61 	bl	8001ef2 <HAL_SYSTICK_Config>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e00e      	b.n	8001458 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b0f      	cmp	r3, #15
 800143e:	d80a      	bhi.n	8001456 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001440:	2200      	movs	r2, #0
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	f04f 30ff 	mov.w	r0, #4294967295
 8001448:	f000 fd37 	bl	8001eba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800144c:	4a06      	ldr	r2, [pc, #24]	; (8001468 <HAL_InitTick+0x5c>)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001452:	2300      	movs	r3, #0
 8001454:	e000      	b.n	8001458 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	2000004c 	.word	0x2000004c
 8001464:	20000054 	.word	0x20000054
 8001468:	20000050 	.word	0x20000050

0800146c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <HAL_IncTick+0x1c>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	4b05      	ldr	r3, [pc, #20]	; (800148c <HAL_IncTick+0x20>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4413      	add	r3, r2
 800147c:	4a03      	ldr	r2, [pc, #12]	; (800148c <HAL_IncTick+0x20>)
 800147e:	6013      	str	r3, [r2, #0]
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr
 8001488:	20000054 	.word	0x20000054
 800148c:	20000148 	.word	0x20000148

08001490 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return uwTick;
 8001494:	4b02      	ldr	r3, [pc, #8]	; (80014a0 <HAL_GetTick+0x10>)
 8001496:	681b      	ldr	r3, [r3, #0]
}
 8001498:	4618      	mov	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr
 80014a0:	20000148 	.word	0x20000148

080014a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014ac:	f7ff fff0 	bl	8001490 <HAL_GetTick>
 80014b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014bc:	d005      	beq.n	80014ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014be:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <HAL_Delay+0x44>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	461a      	mov	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4413      	add	r3, r2
 80014c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ca:	bf00      	nop
 80014cc:	f7ff ffe0 	bl	8001490 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d8f7      	bhi.n	80014cc <HAL_Delay+0x28>
  {
  }
}
 80014dc:	bf00      	nop
 80014de:	bf00      	nop
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000054 	.word	0x20000054

080014ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014f4:	2300      	movs	r3, #0
 80014f6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e0be      	b.n	800168c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001518:	2b00      	cmp	r3, #0
 800151a:	d109      	bne.n	8001530 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff fe2a 	bl	8001184 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 fbc5 	bl	8001cc0 <ADC_ConversionStop_Disable>
 8001536:	4603      	mov	r3, r0
 8001538:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153e:	f003 0310 	and.w	r3, r3, #16
 8001542:	2b00      	cmp	r3, #0
 8001544:	f040 8099 	bne.w	800167a <HAL_ADC_Init+0x18e>
 8001548:	7dfb      	ldrb	r3, [r7, #23]
 800154a:	2b00      	cmp	r3, #0
 800154c:	f040 8095 	bne.w	800167a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001554:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001558:	f023 0302 	bic.w	r3, r3, #2
 800155c:	f043 0202 	orr.w	r2, r3, #2
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800156c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	7b1b      	ldrb	r3, [r3, #12]
 8001572:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001574:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	4313      	orrs	r3, r2
 800157a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001584:	d003      	beq.n	800158e <HAL_ADC_Init+0xa2>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d102      	bne.n	8001594 <HAL_ADC_Init+0xa8>
 800158e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001592:	e000      	b.n	8001596 <HAL_ADC_Init+0xaa>
 8001594:	2300      	movs	r3, #0
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	7d1b      	ldrb	r3, [r3, #20]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d119      	bne.n	80015d8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	7b1b      	ldrb	r3, [r3, #12]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d109      	bne.n	80015c0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	3b01      	subs	r3, #1
 80015b2:	035a      	lsls	r2, r3, #13
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	e00b      	b.n	80015d8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c4:	f043 0220 	orr.w	r2, r3, #32
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d0:	f043 0201 	orr.w	r2, r3, #1
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	689a      	ldr	r2, [r3, #8]
 80015f2:	4b28      	ldr	r3, [pc, #160]	; (8001694 <HAL_ADC_Init+0x1a8>)
 80015f4:	4013      	ands	r3, r2
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	6812      	ldr	r2, [r2, #0]
 80015fa:	68b9      	ldr	r1, [r7, #8]
 80015fc:	430b      	orrs	r3, r1
 80015fe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001608:	d003      	beq.n	8001612 <HAL_ADC_Init+0x126>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d104      	bne.n	800161c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	3b01      	subs	r3, #1
 8001618:	051b      	lsls	r3, r3, #20
 800161a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001622:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	430a      	orrs	r2, r1
 800162e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	689a      	ldr	r2, [r3, #8]
 8001636:	4b18      	ldr	r3, [pc, #96]	; (8001698 <HAL_ADC_Init+0x1ac>)
 8001638:	4013      	ands	r3, r2
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	429a      	cmp	r2, r3
 800163e:	d10b      	bne.n	8001658 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164a:	f023 0303 	bic.w	r3, r3, #3
 800164e:	f043 0201 	orr.w	r2, r3, #1
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001656:	e018      	b.n	800168a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165c:	f023 0312 	bic.w	r3, r3, #18
 8001660:	f043 0210 	orr.w	r2, r3, #16
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166c:	f043 0201 	orr.w	r2, r3, #1
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001678:	e007      	b.n	800168a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167e:	f043 0210 	orr.w	r2, r3, #16
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800168a:	7dfb      	ldrb	r3, [r7, #23]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	ffe1f7fd 	.word	0xffe1f7fd
 8001698:	ff1f0efe 	.word	0xff1f0efe

0800169c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016a4:	2300      	movs	r3, #0
 80016a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d101      	bne.n	80016b6 <HAL_ADC_Start+0x1a>
 80016b2:	2302      	movs	r3, #2
 80016b4:	e098      	b.n	80017e8 <HAL_ADC_Start+0x14c>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 faa4 	bl	8001c0c <ADC_Enable>
 80016c4:	4603      	mov	r3, r0
 80016c6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f040 8087 	bne.w	80017de <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016d8:	f023 0301 	bic.w	r3, r3, #1
 80016dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a41      	ldr	r2, [pc, #260]	; (80017f0 <HAL_ADC_Start+0x154>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d105      	bne.n	80016fa <HAL_ADC_Start+0x5e>
 80016ee:	4b41      	ldr	r3, [pc, #260]	; (80017f4 <HAL_ADC_Start+0x158>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d115      	bne.n	8001726 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001710:	2b00      	cmp	r3, #0
 8001712:	d026      	beq.n	8001762 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001718:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800171c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001724:	e01d      	b.n	8001762 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a2f      	ldr	r2, [pc, #188]	; (80017f4 <HAL_ADC_Start+0x158>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d004      	beq.n	8001746 <HAL_ADC_Start+0xaa>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a2b      	ldr	r2, [pc, #172]	; (80017f0 <HAL_ADC_Start+0x154>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d10d      	bne.n	8001762 <HAL_ADC_Start+0xc6>
 8001746:	4b2b      	ldr	r3, [pc, #172]	; (80017f4 <HAL_ADC_Start+0x158>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800174e:	2b00      	cmp	r3, #0
 8001750:	d007      	beq.n	8001762 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001756:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800175a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001766:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d006      	beq.n	800177c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001772:	f023 0206 	bic.w	r2, r3, #6
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	62da      	str	r2, [r3, #44]	; 0x2c
 800177a:	e002      	b.n	8001782 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f06f 0202 	mvn.w	r2, #2
 8001792:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800179e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80017a2:	d113      	bne.n	80017cc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80017a8:	4a11      	ldr	r2, [pc, #68]	; (80017f0 <HAL_ADC_Start+0x154>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d105      	bne.n	80017ba <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <HAL_ADC_Start+0x158>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d108      	bne.n	80017cc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	e00c      	b.n	80017e6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	e003      	b.n	80017e6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40012800 	.word	0x40012800
 80017f4:	40012400 	.word	0x40012400

080017f8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80017f8:	b590      	push	{r4, r7, lr}
 80017fa:	b087      	sub	sp, #28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800180e:	f7ff fe3f 	bl	8001490 <HAL_GetTick>
 8001812:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00b      	beq.n	800183a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001826:	f043 0220 	orr.w	r2, r3, #32
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e0d3      	b.n	80019e2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001844:	2b00      	cmp	r3, #0
 8001846:	d131      	bne.n	80018ac <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001852:	2b00      	cmp	r3, #0
 8001854:	d12a      	bne.n	80018ac <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001856:	e021      	b.n	800189c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800185e:	d01d      	beq.n	800189c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d007      	beq.n	8001876 <HAL_ADC_PollForConversion+0x7e>
 8001866:	f7ff fe13 	bl	8001490 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	429a      	cmp	r2, r3
 8001874:	d212      	bcs.n	800189c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d10b      	bne.n	800189c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001888:	f043 0204 	orr.w	r2, r3, #4
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e0a2      	b.n	80019e2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0d6      	beq.n	8001858 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80018aa:	e070      	b.n	800198e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80018ac:	4b4f      	ldr	r3, [pc, #316]	; (80019ec <HAL_ADC_PollForConversion+0x1f4>)
 80018ae:	681c      	ldr	r4, [r3, #0]
 80018b0:	2002      	movs	r0, #2
 80018b2:	f001 f971 	bl	8002b98 <HAL_RCCEx_GetPeriphCLKFreq>
 80018b6:	4603      	mov	r3, r0
 80018b8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6919      	ldr	r1, [r3, #16]
 80018c2:	4b4b      	ldr	r3, [pc, #300]	; (80019f0 <HAL_ADC_PollForConversion+0x1f8>)
 80018c4:	400b      	ands	r3, r1
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d118      	bne.n	80018fc <HAL_ADC_PollForConversion+0x104>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	68d9      	ldr	r1, [r3, #12]
 80018d0:	4b48      	ldr	r3, [pc, #288]	; (80019f4 <HAL_ADC_PollForConversion+0x1fc>)
 80018d2:	400b      	ands	r3, r1
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d111      	bne.n	80018fc <HAL_ADC_PollForConversion+0x104>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6919      	ldr	r1, [r3, #16]
 80018de:	4b46      	ldr	r3, [pc, #280]	; (80019f8 <HAL_ADC_PollForConversion+0x200>)
 80018e0:	400b      	ands	r3, r1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d108      	bne.n	80018f8 <HAL_ADC_PollForConversion+0x100>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68d9      	ldr	r1, [r3, #12]
 80018ec:	4b43      	ldr	r3, [pc, #268]	; (80019fc <HAL_ADC_PollForConversion+0x204>)
 80018ee:	400b      	ands	r3, r1
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <HAL_ADC_PollForConversion+0x100>
 80018f4:	2314      	movs	r3, #20
 80018f6:	e020      	b.n	800193a <HAL_ADC_PollForConversion+0x142>
 80018f8:	2329      	movs	r3, #41	; 0x29
 80018fa:	e01e      	b.n	800193a <HAL_ADC_PollForConversion+0x142>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6919      	ldr	r1, [r3, #16]
 8001902:	4b3d      	ldr	r3, [pc, #244]	; (80019f8 <HAL_ADC_PollForConversion+0x200>)
 8001904:	400b      	ands	r3, r1
 8001906:	2b00      	cmp	r3, #0
 8001908:	d106      	bne.n	8001918 <HAL_ADC_PollForConversion+0x120>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68d9      	ldr	r1, [r3, #12]
 8001910:	4b3a      	ldr	r3, [pc, #232]	; (80019fc <HAL_ADC_PollForConversion+0x204>)
 8001912:	400b      	ands	r3, r1
 8001914:	2b00      	cmp	r3, #0
 8001916:	d00d      	beq.n	8001934 <HAL_ADC_PollForConversion+0x13c>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6919      	ldr	r1, [r3, #16]
 800191e:	4b38      	ldr	r3, [pc, #224]	; (8001a00 <HAL_ADC_PollForConversion+0x208>)
 8001920:	400b      	ands	r3, r1
 8001922:	2b00      	cmp	r3, #0
 8001924:	d108      	bne.n	8001938 <HAL_ADC_PollForConversion+0x140>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68d9      	ldr	r1, [r3, #12]
 800192c:	4b34      	ldr	r3, [pc, #208]	; (8001a00 <HAL_ADC_PollForConversion+0x208>)
 800192e:	400b      	ands	r3, r1
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <HAL_ADC_PollForConversion+0x140>
 8001934:	2354      	movs	r3, #84	; 0x54
 8001936:	e000      	b.n	800193a <HAL_ADC_PollForConversion+0x142>
 8001938:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800193a:	fb02 f303 	mul.w	r3, r2, r3
 800193e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001940:	e021      	b.n	8001986 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001948:	d01a      	beq.n	8001980 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d007      	beq.n	8001960 <HAL_ADC_PollForConversion+0x168>
 8001950:	f7ff fd9e 	bl	8001490 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d20f      	bcs.n	8001980 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	429a      	cmp	r2, r3
 8001966:	d90b      	bls.n	8001980 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196c:	f043 0204 	orr.w	r2, r3, #4
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e030      	b.n	80019e2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	3301      	adds	r3, #1
 8001984:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	429a      	cmp	r2, r3
 800198c:	d8d9      	bhi.n	8001942 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f06f 0212 	mvn.w	r2, #18
 8001996:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80019ae:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80019b2:	d115      	bne.n	80019e0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d111      	bne.n	80019e0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d105      	bne.n	80019e0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d8:	f043 0201 	orr.w	r2, r3, #1
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	371c      	adds	r7, #28
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd90      	pop	{r4, r7, pc}
 80019ea:	bf00      	nop
 80019ec:	2000004c 	.word	0x2000004c
 80019f0:	24924924 	.word	0x24924924
 80019f4:	00924924 	.word	0x00924924
 80019f8:	12492492 	.word	0x12492492
 80019fc:	00492492 	.word	0x00492492
 8001a00:	00249249 	.word	0x00249249

08001a04 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr

08001a1c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a26:	2300      	movs	r3, #0
 8001a28:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d101      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x20>
 8001a38:	2302      	movs	r3, #2
 8001a3a:	e0dc      	b.n	8001bf6 <HAL_ADC_ConfigChannel+0x1da>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b06      	cmp	r3, #6
 8001a4a:	d81c      	bhi.n	8001a86 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	3b05      	subs	r3, #5
 8001a5e:	221f      	movs	r2, #31
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	4019      	ands	r1, r3
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	4613      	mov	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	3b05      	subs	r3, #5
 8001a78:	fa00 f203 	lsl.w	r2, r0, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	635a      	str	r2, [r3, #52]	; 0x34
 8001a84:	e03c      	b.n	8001b00 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b0c      	cmp	r3, #12
 8001a8c:	d81c      	bhi.n	8001ac8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	3b23      	subs	r3, #35	; 0x23
 8001aa0:	221f      	movs	r2, #31
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	4019      	ands	r1, r3
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	6818      	ldr	r0, [r3, #0]
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4413      	add	r3, r2
 8001ab8:	3b23      	subs	r3, #35	; 0x23
 8001aba:	fa00 f203 	lsl.w	r2, r0, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ac6:	e01b      	b.n	8001b00 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	3b41      	subs	r3, #65	; 0x41
 8001ada:	221f      	movs	r2, #31
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	4019      	ands	r1, r3
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	6818      	ldr	r0, [r3, #0]
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	4613      	mov	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	3b41      	subs	r3, #65	; 0x41
 8001af4:	fa00 f203 	lsl.w	r2, r0, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b09      	cmp	r3, #9
 8001b06:	d91c      	bls.n	8001b42 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68d9      	ldr	r1, [r3, #12]
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	4613      	mov	r3, r2
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	4413      	add	r3, r2
 8001b18:	3b1e      	subs	r3, #30
 8001b1a:	2207      	movs	r2, #7
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	4019      	ands	r1, r3
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	6898      	ldr	r0, [r3, #8]
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4413      	add	r3, r2
 8001b32:	3b1e      	subs	r3, #30
 8001b34:	fa00 f203 	lsl.w	r2, r0, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	60da      	str	r2, [r3, #12]
 8001b40:	e019      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6919      	ldr	r1, [r3, #16]
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	4413      	add	r3, r2
 8001b52:	2207      	movs	r2, #7
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	4019      	ands	r1, r3
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	6898      	ldr	r0, [r3, #8]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4613      	mov	r3, r2
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4413      	add	r3, r2
 8001b6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2b10      	cmp	r3, #16
 8001b7c:	d003      	beq.n	8001b86 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b82:	2b11      	cmp	r3, #17
 8001b84:	d132      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a1d      	ldr	r2, [pc, #116]	; (8001c00 <HAL_ADC_ConfigChannel+0x1e4>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d125      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d126      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001bac:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2b10      	cmp	r3, #16
 8001bb4:	d11a      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bb6:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <HAL_ADC_ConfigChannel+0x1e8>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a13      	ldr	r2, [pc, #76]	; (8001c08 <HAL_ADC_ConfigChannel+0x1ec>)
 8001bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc0:	0c9a      	lsrs	r2, r3, #18
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bcc:	e002      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f9      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x1b2>
 8001bda:	e007      	b.n	8001bec <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be0:	f043 0220 	orr.w	r2, r3, #32
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr
 8001c00:	40012400 	.word	0x40012400
 8001c04:	2000004c 	.word	0x2000004c
 8001c08:	431bde83 	.word	0x431bde83

08001c0c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d040      	beq.n	8001cac <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f042 0201 	orr.w	r2, r2, #1
 8001c38:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c3a:	4b1f      	ldr	r3, [pc, #124]	; (8001cb8 <ADC_Enable+0xac>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a1f      	ldr	r2, [pc, #124]	; (8001cbc <ADC_Enable+0xb0>)
 8001c40:	fba2 2303 	umull	r2, r3, r2, r3
 8001c44:	0c9b      	lsrs	r3, r3, #18
 8001c46:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c48:	e002      	b.n	8001c50 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f9      	bne.n	8001c4a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c56:	f7ff fc1b 	bl	8001490 <HAL_GetTick>
 8001c5a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c5c:	e01f      	b.n	8001c9e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c5e:	f7ff fc17 	bl	8001490 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d918      	bls.n	8001c9e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d011      	beq.n	8001c9e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7e:	f043 0210 	orr.w	r2, r3, #16
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8a:	f043 0201 	orr.w	r2, r3, #1
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e007      	b.n	8001cae <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d1d8      	bne.n	8001c5e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	2000004c 	.word	0x2000004c
 8001cbc:	431bde83 	.word	0x431bde83

08001cc0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d12e      	bne.n	8001d38 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0201 	bic.w	r2, r2, #1
 8001ce8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cea:	f7ff fbd1 	bl	8001490 <HAL_GetTick>
 8001cee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001cf0:	e01b      	b.n	8001d2a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001cf2:	f7ff fbcd 	bl	8001490 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d914      	bls.n	8001d2a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d10d      	bne.n	8001d2a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d12:	f043 0210 	orr.w	r2, r3, #16
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1e:	f043 0201 	orr.w	r2, r3, #1
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e007      	b.n	8001d3a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d0dc      	beq.n	8001cf2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d54:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <__NVIC_SetPriorityGrouping+0x44>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d60:	4013      	ands	r3, r2
 8001d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d76:	4a04      	ldr	r2, [pc, #16]	; (8001d88 <__NVIC_SetPriorityGrouping+0x44>)
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	60d3      	str	r3, [r2, #12]
}
 8001d7c:	bf00      	nop
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d90:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <__NVIC_GetPriorityGrouping+0x18>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	0a1b      	lsrs	r3, r3, #8
 8001d96:	f003 0307 	and.w	r3, r3, #7
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	6039      	str	r1, [r7, #0]
 8001db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	db0a      	blt.n	8001dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	490c      	ldr	r1, [pc, #48]	; (8001df4 <__NVIC_SetPriority+0x4c>)
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	0112      	lsls	r2, r2, #4
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	440b      	add	r3, r1
 8001dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd0:	e00a      	b.n	8001de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	4908      	ldr	r1, [pc, #32]	; (8001df8 <__NVIC_SetPriority+0x50>)
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	3b04      	subs	r3, #4
 8001de0:	0112      	lsls	r2, r2, #4
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	440b      	add	r3, r1
 8001de6:	761a      	strb	r2, [r3, #24]
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	e000e100 	.word	0xe000e100
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b089      	sub	sp, #36	; 0x24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f1c3 0307 	rsb	r3, r3, #7
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	bf28      	it	cs
 8001e1a:	2304      	movcs	r3, #4
 8001e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3304      	adds	r3, #4
 8001e22:	2b06      	cmp	r3, #6
 8001e24:	d902      	bls.n	8001e2c <NVIC_EncodePriority+0x30>
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3b03      	subs	r3, #3
 8001e2a:	e000      	b.n	8001e2e <NVIC_EncodePriority+0x32>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	f04f 32ff 	mov.w	r2, #4294967295
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43da      	mvns	r2, r3
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	401a      	ands	r2, r3
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e44:	f04f 31ff 	mov.w	r1, #4294967295
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4e:	43d9      	mvns	r1, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e54:	4313      	orrs	r3, r2
         );
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3724      	adds	r7, #36	; 0x24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e70:	d301      	bcc.n	8001e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e72:	2301      	movs	r3, #1
 8001e74:	e00f      	b.n	8001e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e76:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <SysTick_Config+0x40>)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e7e:	210f      	movs	r1, #15
 8001e80:	f04f 30ff 	mov.w	r0, #4294967295
 8001e84:	f7ff ff90 	bl	8001da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <SysTick_Config+0x40>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8e:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <SysTick_Config+0x40>)
 8001e90:	2207      	movs	r2, #7
 8001e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	e000e010 	.word	0xe000e010

08001ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ff49 	bl	8001d44 <__NVIC_SetPriorityGrouping>
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b086      	sub	sp, #24
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
 8001ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ecc:	f7ff ff5e 	bl	8001d8c <__NVIC_GetPriorityGrouping>
 8001ed0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	68b9      	ldr	r1, [r7, #8]
 8001ed6:	6978      	ldr	r0, [r7, #20]
 8001ed8:	f7ff ff90 	bl	8001dfc <NVIC_EncodePriority>
 8001edc:	4602      	mov	r2, r0
 8001ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff ff5f 	bl	8001da8 <__NVIC_SetPriority>
}
 8001eea:	bf00      	nop
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff ffb0 	bl	8001e60 <SysTick_Config>
 8001f00:	4603      	mov	r3, r0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b08b      	sub	sp, #44	; 0x2c
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f16:	2300      	movs	r3, #0
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f1e:	e161      	b.n	80021e4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f20:	2201      	movs	r2, #1
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	69fa      	ldr	r2, [r7, #28]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	f040 8150 	bne.w	80021de <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	4a97      	ldr	r2, [pc, #604]	; (80021a0 <HAL_GPIO_Init+0x294>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d05e      	beq.n	8002006 <HAL_GPIO_Init+0xfa>
 8001f48:	4a95      	ldr	r2, [pc, #596]	; (80021a0 <HAL_GPIO_Init+0x294>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d875      	bhi.n	800203a <HAL_GPIO_Init+0x12e>
 8001f4e:	4a95      	ldr	r2, [pc, #596]	; (80021a4 <HAL_GPIO_Init+0x298>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d058      	beq.n	8002006 <HAL_GPIO_Init+0xfa>
 8001f54:	4a93      	ldr	r2, [pc, #588]	; (80021a4 <HAL_GPIO_Init+0x298>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d86f      	bhi.n	800203a <HAL_GPIO_Init+0x12e>
 8001f5a:	4a93      	ldr	r2, [pc, #588]	; (80021a8 <HAL_GPIO_Init+0x29c>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d052      	beq.n	8002006 <HAL_GPIO_Init+0xfa>
 8001f60:	4a91      	ldr	r2, [pc, #580]	; (80021a8 <HAL_GPIO_Init+0x29c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d869      	bhi.n	800203a <HAL_GPIO_Init+0x12e>
 8001f66:	4a91      	ldr	r2, [pc, #580]	; (80021ac <HAL_GPIO_Init+0x2a0>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d04c      	beq.n	8002006 <HAL_GPIO_Init+0xfa>
 8001f6c:	4a8f      	ldr	r2, [pc, #572]	; (80021ac <HAL_GPIO_Init+0x2a0>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d863      	bhi.n	800203a <HAL_GPIO_Init+0x12e>
 8001f72:	4a8f      	ldr	r2, [pc, #572]	; (80021b0 <HAL_GPIO_Init+0x2a4>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d046      	beq.n	8002006 <HAL_GPIO_Init+0xfa>
 8001f78:	4a8d      	ldr	r2, [pc, #564]	; (80021b0 <HAL_GPIO_Init+0x2a4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d85d      	bhi.n	800203a <HAL_GPIO_Init+0x12e>
 8001f7e:	2b12      	cmp	r3, #18
 8001f80:	d82a      	bhi.n	8001fd8 <HAL_GPIO_Init+0xcc>
 8001f82:	2b12      	cmp	r3, #18
 8001f84:	d859      	bhi.n	800203a <HAL_GPIO_Init+0x12e>
 8001f86:	a201      	add	r2, pc, #4	; (adr r2, 8001f8c <HAL_GPIO_Init+0x80>)
 8001f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f8c:	08002007 	.word	0x08002007
 8001f90:	08001fe1 	.word	0x08001fe1
 8001f94:	08001ff3 	.word	0x08001ff3
 8001f98:	08002035 	.word	0x08002035
 8001f9c:	0800203b 	.word	0x0800203b
 8001fa0:	0800203b 	.word	0x0800203b
 8001fa4:	0800203b 	.word	0x0800203b
 8001fa8:	0800203b 	.word	0x0800203b
 8001fac:	0800203b 	.word	0x0800203b
 8001fb0:	0800203b 	.word	0x0800203b
 8001fb4:	0800203b 	.word	0x0800203b
 8001fb8:	0800203b 	.word	0x0800203b
 8001fbc:	0800203b 	.word	0x0800203b
 8001fc0:	0800203b 	.word	0x0800203b
 8001fc4:	0800203b 	.word	0x0800203b
 8001fc8:	0800203b 	.word	0x0800203b
 8001fcc:	0800203b 	.word	0x0800203b
 8001fd0:	08001fe9 	.word	0x08001fe9
 8001fd4:	08001ffd 	.word	0x08001ffd
 8001fd8:	4a76      	ldr	r2, [pc, #472]	; (80021b4 <HAL_GPIO_Init+0x2a8>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d013      	beq.n	8002006 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fde:	e02c      	b.n	800203a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	623b      	str	r3, [r7, #32]
          break;
 8001fe6:	e029      	b.n	800203c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	3304      	adds	r3, #4
 8001fee:	623b      	str	r3, [r7, #32]
          break;
 8001ff0:	e024      	b.n	800203c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	3308      	adds	r3, #8
 8001ff8:	623b      	str	r3, [r7, #32]
          break;
 8001ffa:	e01f      	b.n	800203c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	330c      	adds	r3, #12
 8002002:	623b      	str	r3, [r7, #32]
          break;
 8002004:	e01a      	b.n	800203c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d102      	bne.n	8002014 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800200e:	2304      	movs	r3, #4
 8002010:	623b      	str	r3, [r7, #32]
          break;
 8002012:	e013      	b.n	800203c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d105      	bne.n	8002028 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800201c:	2308      	movs	r3, #8
 800201e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	69fa      	ldr	r2, [r7, #28]
 8002024:	611a      	str	r2, [r3, #16]
          break;
 8002026:	e009      	b.n	800203c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002028:	2308      	movs	r3, #8
 800202a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69fa      	ldr	r2, [r7, #28]
 8002030:	615a      	str	r2, [r3, #20]
          break;
 8002032:	e003      	b.n	800203c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002034:	2300      	movs	r3, #0
 8002036:	623b      	str	r3, [r7, #32]
          break;
 8002038:	e000      	b.n	800203c <HAL_GPIO_Init+0x130>
          break;
 800203a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	2bff      	cmp	r3, #255	; 0xff
 8002040:	d801      	bhi.n	8002046 <HAL_GPIO_Init+0x13a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	e001      	b.n	800204a <HAL_GPIO_Init+0x13e>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3304      	adds	r3, #4
 800204a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	2bff      	cmp	r3, #255	; 0xff
 8002050:	d802      	bhi.n	8002058 <HAL_GPIO_Init+0x14c>
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	e002      	b.n	800205e <HAL_GPIO_Init+0x152>
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	3b08      	subs	r3, #8
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	210f      	movs	r1, #15
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	fa01 f303 	lsl.w	r3, r1, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	401a      	ands	r2, r3
 8002070:	6a39      	ldr	r1, [r7, #32]
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	fa01 f303 	lsl.w	r3, r1, r3
 8002078:	431a      	orrs	r2, r3
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 80a9 	beq.w	80021de <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800208c:	4b4a      	ldr	r3, [pc, #296]	; (80021b8 <HAL_GPIO_Init+0x2ac>)
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	4a49      	ldr	r2, [pc, #292]	; (80021b8 <HAL_GPIO_Init+0x2ac>)
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	6193      	str	r3, [r2, #24]
 8002098:	4b47      	ldr	r3, [pc, #284]	; (80021b8 <HAL_GPIO_Init+0x2ac>)
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020a4:	4a45      	ldr	r2, [pc, #276]	; (80021bc <HAL_GPIO_Init+0x2b0>)
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	089b      	lsrs	r3, r3, #2
 80020aa:	3302      	adds	r3, #2
 80020ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	220f      	movs	r2, #15
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	4013      	ands	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a3d      	ldr	r2, [pc, #244]	; (80021c0 <HAL_GPIO_Init+0x2b4>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d00d      	beq.n	80020ec <HAL_GPIO_Init+0x1e0>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a3c      	ldr	r2, [pc, #240]	; (80021c4 <HAL_GPIO_Init+0x2b8>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d007      	beq.n	80020e8 <HAL_GPIO_Init+0x1dc>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a3b      	ldr	r2, [pc, #236]	; (80021c8 <HAL_GPIO_Init+0x2bc>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d101      	bne.n	80020e4 <HAL_GPIO_Init+0x1d8>
 80020e0:	2302      	movs	r3, #2
 80020e2:	e004      	b.n	80020ee <HAL_GPIO_Init+0x1e2>
 80020e4:	2303      	movs	r3, #3
 80020e6:	e002      	b.n	80020ee <HAL_GPIO_Init+0x1e2>
 80020e8:	2301      	movs	r3, #1
 80020ea:	e000      	b.n	80020ee <HAL_GPIO_Init+0x1e2>
 80020ec:	2300      	movs	r3, #0
 80020ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f0:	f002 0203 	and.w	r2, r2, #3
 80020f4:	0092      	lsls	r2, r2, #2
 80020f6:	4093      	lsls	r3, r2
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020fe:	492f      	ldr	r1, [pc, #188]	; (80021bc <HAL_GPIO_Init+0x2b0>)
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	089b      	lsrs	r3, r3, #2
 8002104:	3302      	adds	r3, #2
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d006      	beq.n	8002126 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002118:	4b2c      	ldr	r3, [pc, #176]	; (80021cc <HAL_GPIO_Init+0x2c0>)
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	492b      	ldr	r1, [pc, #172]	; (80021cc <HAL_GPIO_Init+0x2c0>)
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	4313      	orrs	r3, r2
 8002122:	608b      	str	r3, [r1, #8]
 8002124:	e006      	b.n	8002134 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002126:	4b29      	ldr	r3, [pc, #164]	; (80021cc <HAL_GPIO_Init+0x2c0>)
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	43db      	mvns	r3, r3
 800212e:	4927      	ldr	r1, [pc, #156]	; (80021cc <HAL_GPIO_Init+0x2c0>)
 8002130:	4013      	ands	r3, r2
 8002132:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d006      	beq.n	800214e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002140:	4b22      	ldr	r3, [pc, #136]	; (80021cc <HAL_GPIO_Init+0x2c0>)
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	4921      	ldr	r1, [pc, #132]	; (80021cc <HAL_GPIO_Init+0x2c0>)
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	4313      	orrs	r3, r2
 800214a:	60cb      	str	r3, [r1, #12]
 800214c:	e006      	b.n	800215c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800214e:	4b1f      	ldr	r3, [pc, #124]	; (80021cc <HAL_GPIO_Init+0x2c0>)
 8002150:	68da      	ldr	r2, [r3, #12]
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	43db      	mvns	r3, r3
 8002156:	491d      	ldr	r1, [pc, #116]	; (80021cc <HAL_GPIO_Init+0x2c0>)
 8002158:	4013      	ands	r3, r2
 800215a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d006      	beq.n	8002176 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002168:	4b18      	ldr	r3, [pc, #96]	; (80021cc <HAL_GPIO_Init+0x2c0>)
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	4917      	ldr	r1, [pc, #92]	; (80021cc <HAL_GPIO_Init+0x2c0>)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	4313      	orrs	r3, r2
 8002172:	604b      	str	r3, [r1, #4]
 8002174:	e006      	b.n	8002184 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002176:	4b15      	ldr	r3, [pc, #84]	; (80021cc <HAL_GPIO_Init+0x2c0>)
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	43db      	mvns	r3, r3
 800217e:	4913      	ldr	r1, [pc, #76]	; (80021cc <HAL_GPIO_Init+0x2c0>)
 8002180:	4013      	ands	r3, r2
 8002182:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d01f      	beq.n	80021d0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002190:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <HAL_GPIO_Init+0x2c0>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	490d      	ldr	r1, [pc, #52]	; (80021cc <HAL_GPIO_Init+0x2c0>)
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	4313      	orrs	r3, r2
 800219a:	600b      	str	r3, [r1, #0]
 800219c:	e01f      	b.n	80021de <HAL_GPIO_Init+0x2d2>
 800219e:	bf00      	nop
 80021a0:	10320000 	.word	0x10320000
 80021a4:	10310000 	.word	0x10310000
 80021a8:	10220000 	.word	0x10220000
 80021ac:	10210000 	.word	0x10210000
 80021b0:	10120000 	.word	0x10120000
 80021b4:	10110000 	.word	0x10110000
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40010000 	.word	0x40010000
 80021c0:	40010800 	.word	0x40010800
 80021c4:	40010c00 	.word	0x40010c00
 80021c8:	40011000 	.word	0x40011000
 80021cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021d0:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <HAL_GPIO_Init+0x2f4>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	43db      	mvns	r3, r3
 80021d8:	4909      	ldr	r1, [pc, #36]	; (8002200 <HAL_GPIO_Init+0x2f4>)
 80021da:	4013      	ands	r3, r2
 80021dc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	3301      	adds	r3, #1
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	fa22 f303 	lsr.w	r3, r2, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f47f ae96 	bne.w	8001f20 <HAL_GPIO_Init+0x14>
  }
}
 80021f4:	bf00      	nop
 80021f6:	bf00      	nop
 80021f8:	372c      	adds	r7, #44	; 0x2c
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr
 8002200:	40010400 	.word	0x40010400

08002204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	807b      	strh	r3, [r7, #2]
 8002210:	4613      	mov	r3, r2
 8002212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002214:	787b      	ldrb	r3, [r7, #1]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800221a:	887a      	ldrh	r2, [r7, #2]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002220:	e003      	b.n	800222a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002222:	887b      	ldrh	r3, [r7, #2]
 8002224:	041a      	lsls	r2, r3, #16
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	611a      	str	r2, [r3, #16]
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr

08002234 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e272      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 8087 	beq.w	8002362 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002254:	4b92      	ldr	r3, [pc, #584]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 030c 	and.w	r3, r3, #12
 800225c:	2b04      	cmp	r3, #4
 800225e:	d00c      	beq.n	800227a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002260:	4b8f      	ldr	r3, [pc, #572]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 030c 	and.w	r3, r3, #12
 8002268:	2b08      	cmp	r3, #8
 800226a:	d112      	bne.n	8002292 <HAL_RCC_OscConfig+0x5e>
 800226c:	4b8c      	ldr	r3, [pc, #560]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002278:	d10b      	bne.n	8002292 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800227a:	4b89      	ldr	r3, [pc, #548]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d06c      	beq.n	8002360 <HAL_RCC_OscConfig+0x12c>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d168      	bne.n	8002360 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e24c      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800229a:	d106      	bne.n	80022aa <HAL_RCC_OscConfig+0x76>
 800229c:	4b80      	ldr	r3, [pc, #512]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a7f      	ldr	r2, [pc, #508]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	e02e      	b.n	8002308 <HAL_RCC_OscConfig+0xd4>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10c      	bne.n	80022cc <HAL_RCC_OscConfig+0x98>
 80022b2:	4b7b      	ldr	r3, [pc, #492]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a7a      	ldr	r2, [pc, #488]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	4b78      	ldr	r3, [pc, #480]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a77      	ldr	r2, [pc, #476]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	e01d      	b.n	8002308 <HAL_RCC_OscConfig+0xd4>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022d4:	d10c      	bne.n	80022f0 <HAL_RCC_OscConfig+0xbc>
 80022d6:	4b72      	ldr	r3, [pc, #456]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a71      	ldr	r2, [pc, #452]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	4b6f      	ldr	r3, [pc, #444]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a6e      	ldr	r2, [pc, #440]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	e00b      	b.n	8002308 <HAL_RCC_OscConfig+0xd4>
 80022f0:	4b6b      	ldr	r3, [pc, #428]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a6a      	ldr	r2, [pc, #424]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	4b68      	ldr	r3, [pc, #416]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a67      	ldr	r2, [pc, #412]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002306:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d013      	beq.n	8002338 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002310:	f7ff f8be 	bl	8001490 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002318:	f7ff f8ba 	bl	8001490 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b64      	cmp	r3, #100	; 0x64
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e200      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232a:	4b5d      	ldr	r3, [pc, #372]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f0      	beq.n	8002318 <HAL_RCC_OscConfig+0xe4>
 8002336:	e014      	b.n	8002362 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002338:	f7ff f8aa 	bl	8001490 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002340:	f7ff f8a6 	bl	8001490 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b64      	cmp	r3, #100	; 0x64
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e1ec      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002352:	4b53      	ldr	r3, [pc, #332]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0x10c>
 800235e:	e000      	b.n	8002362 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d063      	beq.n	8002436 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800236e:	4b4c      	ldr	r3, [pc, #304]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00b      	beq.n	8002392 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800237a:	4b49      	ldr	r3, [pc, #292]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	2b08      	cmp	r3, #8
 8002384:	d11c      	bne.n	80023c0 <HAL_RCC_OscConfig+0x18c>
 8002386:	4b46      	ldr	r3, [pc, #280]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d116      	bne.n	80023c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002392:	4b43      	ldr	r3, [pc, #268]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d005      	beq.n	80023aa <HAL_RCC_OscConfig+0x176>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d001      	beq.n	80023aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e1c0      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023aa:	4b3d      	ldr	r3, [pc, #244]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	4939      	ldr	r1, [pc, #228]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023be:	e03a      	b.n	8002436 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d020      	beq.n	800240a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c8:	4b36      	ldr	r3, [pc, #216]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ce:	f7ff f85f 	bl	8001490 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d6:	f7ff f85b 	bl	8001490 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e1a1      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e8:	4b2d      	ldr	r3, [pc, #180]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f4:	4b2a      	ldr	r3, [pc, #168]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4927      	ldr	r1, [pc, #156]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002404:	4313      	orrs	r3, r2
 8002406:	600b      	str	r3, [r1, #0]
 8002408:	e015      	b.n	8002436 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800240a:	4b26      	ldr	r3, [pc, #152]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002410:	f7ff f83e 	bl	8001490 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002418:	f7ff f83a 	bl	8001490 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e180      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800242a:	4b1d      	ldr	r3, [pc, #116]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f0      	bne.n	8002418 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b00      	cmp	r3, #0
 8002440:	d03a      	beq.n	80024b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d019      	beq.n	800247e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800244a:	4b17      	ldr	r3, [pc, #92]	; (80024a8 <HAL_RCC_OscConfig+0x274>)
 800244c:	2201      	movs	r2, #1
 800244e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002450:	f7ff f81e 	bl	8001490 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002458:	f7ff f81a 	bl	8001490 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e160      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800246a:	4b0d      	ldr	r3, [pc, #52]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 800246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002476:	2001      	movs	r0, #1
 8002478:	f000 faba 	bl	80029f0 <RCC_Delay>
 800247c:	e01c      	b.n	80024b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800247e:	4b0a      	ldr	r3, [pc, #40]	; (80024a8 <HAL_RCC_OscConfig+0x274>)
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002484:	f7ff f804 	bl	8001490 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800248a:	e00f      	b.n	80024ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800248c:	f7ff f800 	bl	8001490 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d908      	bls.n	80024ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e146      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
 800249e:	bf00      	nop
 80024a0:	40021000 	.word	0x40021000
 80024a4:	42420000 	.word	0x42420000
 80024a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ac:	4b92      	ldr	r3, [pc, #584]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1e9      	bne.n	800248c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 80a6 	beq.w	8002612 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024c6:	2300      	movs	r3, #0
 80024c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ca:	4b8b      	ldr	r3, [pc, #556]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10d      	bne.n	80024f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024d6:	4b88      	ldr	r3, [pc, #544]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	4a87      	ldr	r2, [pc, #540]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e0:	61d3      	str	r3, [r2, #28]
 80024e2:	4b85      	ldr	r3, [pc, #532]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ee:	2301      	movs	r3, #1
 80024f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f2:	4b82      	ldr	r3, [pc, #520]	; (80026fc <HAL_RCC_OscConfig+0x4c8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d118      	bne.n	8002530 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024fe:	4b7f      	ldr	r3, [pc, #508]	; (80026fc <HAL_RCC_OscConfig+0x4c8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a7e      	ldr	r2, [pc, #504]	; (80026fc <HAL_RCC_OscConfig+0x4c8>)
 8002504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800250a:	f7fe ffc1 	bl	8001490 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002512:	f7fe ffbd 	bl	8001490 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b64      	cmp	r3, #100	; 0x64
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e103      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002524:	4b75      	ldr	r3, [pc, #468]	; (80026fc <HAL_RCC_OscConfig+0x4c8>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0f0      	beq.n	8002512 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d106      	bne.n	8002546 <HAL_RCC_OscConfig+0x312>
 8002538:	4b6f      	ldr	r3, [pc, #444]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	4a6e      	ldr	r2, [pc, #440]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	6213      	str	r3, [r2, #32]
 8002544:	e02d      	b.n	80025a2 <HAL_RCC_OscConfig+0x36e>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10c      	bne.n	8002568 <HAL_RCC_OscConfig+0x334>
 800254e:	4b6a      	ldr	r3, [pc, #424]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	4a69      	ldr	r2, [pc, #420]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002554:	f023 0301 	bic.w	r3, r3, #1
 8002558:	6213      	str	r3, [r2, #32]
 800255a:	4b67      	ldr	r3, [pc, #412]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	4a66      	ldr	r2, [pc, #408]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002560:	f023 0304 	bic.w	r3, r3, #4
 8002564:	6213      	str	r3, [r2, #32]
 8002566:	e01c      	b.n	80025a2 <HAL_RCC_OscConfig+0x36e>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	2b05      	cmp	r3, #5
 800256e:	d10c      	bne.n	800258a <HAL_RCC_OscConfig+0x356>
 8002570:	4b61      	ldr	r3, [pc, #388]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	4a60      	ldr	r2, [pc, #384]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002576:	f043 0304 	orr.w	r3, r3, #4
 800257a:	6213      	str	r3, [r2, #32]
 800257c:	4b5e      	ldr	r3, [pc, #376]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	4a5d      	ldr	r2, [pc, #372]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	6213      	str	r3, [r2, #32]
 8002588:	e00b      	b.n	80025a2 <HAL_RCC_OscConfig+0x36e>
 800258a:	4b5b      	ldr	r3, [pc, #364]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	4a5a      	ldr	r2, [pc, #360]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002590:	f023 0301 	bic.w	r3, r3, #1
 8002594:	6213      	str	r3, [r2, #32]
 8002596:	4b58      	ldr	r3, [pc, #352]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	4a57      	ldr	r2, [pc, #348]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800259c:	f023 0304 	bic.w	r3, r3, #4
 80025a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d015      	beq.n	80025d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025aa:	f7fe ff71 	bl	8001490 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b0:	e00a      	b.n	80025c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b2:	f7fe ff6d 	bl	8001490 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e0b1      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c8:	4b4b      	ldr	r3, [pc, #300]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0ee      	beq.n	80025b2 <HAL_RCC_OscConfig+0x37e>
 80025d4:	e014      	b.n	8002600 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d6:	f7fe ff5b 	bl	8001490 <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025dc:	e00a      	b.n	80025f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025de:	f7fe ff57 	bl	8001490 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e09b      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f4:	4b40      	ldr	r3, [pc, #256]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1ee      	bne.n	80025de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002600:	7dfb      	ldrb	r3, [r7, #23]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d105      	bne.n	8002612 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002606:	4b3c      	ldr	r3, [pc, #240]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	4a3b      	ldr	r2, [pc, #236]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800260c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002610:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 8087 	beq.w	800272a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800261c:	4b36      	ldr	r3, [pc, #216]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 030c 	and.w	r3, r3, #12
 8002624:	2b08      	cmp	r3, #8
 8002626:	d061      	beq.n	80026ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	2b02      	cmp	r3, #2
 800262e:	d146      	bne.n	80026be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002630:	4b33      	ldr	r3, [pc, #204]	; (8002700 <HAL_RCC_OscConfig+0x4cc>)
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002636:	f7fe ff2b 	bl	8001490 <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263e:	f7fe ff27 	bl	8001490 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e06d      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002650:	4b29      	ldr	r3, [pc, #164]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1f0      	bne.n	800263e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002664:	d108      	bne.n	8002678 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002666:	4b24      	ldr	r3, [pc, #144]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	4921      	ldr	r1, [pc, #132]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002674:	4313      	orrs	r3, r2
 8002676:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002678:	4b1f      	ldr	r3, [pc, #124]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a19      	ldr	r1, [r3, #32]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	430b      	orrs	r3, r1
 800268a:	491b      	ldr	r1, [pc, #108]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800268c:	4313      	orrs	r3, r2
 800268e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002690:	4b1b      	ldr	r3, [pc, #108]	; (8002700 <HAL_RCC_OscConfig+0x4cc>)
 8002692:	2201      	movs	r2, #1
 8002694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002696:	f7fe fefb 	bl	8001490 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800269e:	f7fe fef7 	bl	8001490 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e03d      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026b0:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0f0      	beq.n	800269e <HAL_RCC_OscConfig+0x46a>
 80026bc:	e035      	b.n	800272a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026be:	4b10      	ldr	r3, [pc, #64]	; (8002700 <HAL_RCC_OscConfig+0x4cc>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c4:	f7fe fee4 	bl	8001490 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026cc:	f7fe fee0 	bl	8001490 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e026      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026de:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x498>
 80026ea:	e01e      	b.n	800272a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d107      	bne.n	8002704 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e019      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40007000 	.word	0x40007000
 8002700:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002704:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <HAL_RCC_OscConfig+0x500>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	429a      	cmp	r2, r3
 8002716:	d106      	bne.n	8002726 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002722:	429a      	cmp	r2, r3
 8002724:	d001      	beq.n	800272a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40021000 	.word	0x40021000

08002738 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0d0      	b.n	80028ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800274c:	4b6a      	ldr	r3, [pc, #424]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d910      	bls.n	800277c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275a:	4b67      	ldr	r3, [pc, #412]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f023 0207 	bic.w	r2, r3, #7
 8002762:	4965      	ldr	r1, [pc, #404]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	4313      	orrs	r3, r2
 8002768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800276a:	4b63      	ldr	r3, [pc, #396]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	429a      	cmp	r2, r3
 8002776:	d001      	beq.n	800277c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0b8      	b.n	80028ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d020      	beq.n	80027ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	d005      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002794:	4b59      	ldr	r3, [pc, #356]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	4a58      	ldr	r2, [pc, #352]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 800279a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800279e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0308 	and.w	r3, r3, #8
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d005      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027ac:	4b53      	ldr	r3, [pc, #332]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	4a52      	ldr	r2, [pc, #328]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80027b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027b8:	4b50      	ldr	r3, [pc, #320]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	494d      	ldr	r1, [pc, #308]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d040      	beq.n	8002858 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d107      	bne.n	80027ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027de:	4b47      	ldr	r3, [pc, #284]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d115      	bne.n	8002816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e07f      	b.n	80028ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d107      	bne.n	8002806 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f6:	4b41      	ldr	r3, [pc, #260]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d109      	bne.n	8002816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e073      	b.n	80028ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002806:	4b3d      	ldr	r3, [pc, #244]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e06b      	b.n	80028ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002816:	4b39      	ldr	r3, [pc, #228]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f023 0203 	bic.w	r2, r3, #3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	4936      	ldr	r1, [pc, #216]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002824:	4313      	orrs	r3, r2
 8002826:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002828:	f7fe fe32 	bl	8001490 <HAL_GetTick>
 800282c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282e:	e00a      	b.n	8002846 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002830:	f7fe fe2e 	bl	8001490 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	f241 3288 	movw	r2, #5000	; 0x1388
 800283e:	4293      	cmp	r3, r2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e053      	b.n	80028ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002846:	4b2d      	ldr	r3, [pc, #180]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f003 020c 	and.w	r2, r3, #12
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	429a      	cmp	r2, r3
 8002856:	d1eb      	bne.n	8002830 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002858:	4b27      	ldr	r3, [pc, #156]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d210      	bcs.n	8002888 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002866:	4b24      	ldr	r3, [pc, #144]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f023 0207 	bic.w	r2, r3, #7
 800286e:	4922      	ldr	r1, [pc, #136]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	4313      	orrs	r3, r2
 8002874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002876:	4b20      	ldr	r3, [pc, #128]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	429a      	cmp	r2, r3
 8002882:	d001      	beq.n	8002888 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e032      	b.n	80028ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b00      	cmp	r3, #0
 8002892:	d008      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002894:	4b19      	ldr	r3, [pc, #100]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	4916      	ldr	r1, [pc, #88]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0308 	and.w	r3, r3, #8
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d009      	beq.n	80028c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028b2:	4b12      	ldr	r3, [pc, #72]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	490e      	ldr	r1, [pc, #56]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028c6:	f000 f821 	bl	800290c <HAL_RCC_GetSysClockFreq>
 80028ca:	4602      	mov	r2, r0
 80028cc:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	091b      	lsrs	r3, r3, #4
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	490a      	ldr	r1, [pc, #40]	; (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 80028d8:	5ccb      	ldrb	r3, [r1, r3]
 80028da:	fa22 f303 	lsr.w	r3, r2, r3
 80028de:	4a09      	ldr	r2, [pc, #36]	; (8002904 <HAL_RCC_ClockConfig+0x1cc>)
 80028e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028e2:	4b09      	ldr	r3, [pc, #36]	; (8002908 <HAL_RCC_ClockConfig+0x1d0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fe fd90 	bl	800140c <HAL_InitTick>

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40022000 	.word	0x40022000
 80028fc:	40021000 	.word	0x40021000
 8002900:	08003cbc 	.word	0x08003cbc
 8002904:	2000004c 	.word	0x2000004c
 8002908:	20000050 	.word	0x20000050

0800290c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800290c:	b480      	push	{r7}
 800290e:	b087      	sub	sp, #28
 8002910:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	2300      	movs	r3, #0
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	2300      	movs	r3, #0
 8002920:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002922:	2300      	movs	r3, #0
 8002924:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002926:	4b1e      	ldr	r3, [pc, #120]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f003 030c 	and.w	r3, r3, #12
 8002932:	2b04      	cmp	r3, #4
 8002934:	d002      	beq.n	800293c <HAL_RCC_GetSysClockFreq+0x30>
 8002936:	2b08      	cmp	r3, #8
 8002938:	d003      	beq.n	8002942 <HAL_RCC_GetSysClockFreq+0x36>
 800293a:	e027      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800293c:	4b19      	ldr	r3, [pc, #100]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800293e:	613b      	str	r3, [r7, #16]
      break;
 8002940:	e027      	b.n	8002992 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	0c9b      	lsrs	r3, r3, #18
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	4a17      	ldr	r2, [pc, #92]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800294c:	5cd3      	ldrb	r3, [r2, r3]
 800294e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d010      	beq.n	800297c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800295a:	4b11      	ldr	r3, [pc, #68]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	0c5b      	lsrs	r3, r3, #17
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	4a11      	ldr	r2, [pc, #68]	; (80029ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8002966:	5cd3      	ldrb	r3, [r2, r3]
 8002968:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a0d      	ldr	r2, [pc, #52]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800296e:	fb03 f202 	mul.w	r2, r3, r2
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	fbb2 f3f3 	udiv	r3, r2, r3
 8002978:	617b      	str	r3, [r7, #20]
 800297a:	e004      	b.n	8002986 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a0c      	ldr	r2, [pc, #48]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002980:	fb02 f303 	mul.w	r3, r2, r3
 8002984:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	613b      	str	r3, [r7, #16]
      break;
 800298a:	e002      	b.n	8002992 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800298c:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800298e:	613b      	str	r3, [r7, #16]
      break;
 8002990:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002992:	693b      	ldr	r3, [r7, #16]
}
 8002994:	4618      	mov	r0, r3
 8002996:	371c      	adds	r7, #28
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40021000 	.word	0x40021000
 80029a4:	007a1200 	.word	0x007a1200
 80029a8:	08003cd4 	.word	0x08003cd4
 80029ac:	08003ce4 	.word	0x08003ce4
 80029b0:	003d0900 	.word	0x003d0900

080029b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029b8:	4b02      	ldr	r3, [pc, #8]	; (80029c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80029ba:	681b      	ldr	r3, [r3, #0]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr
 80029c4:	2000004c 	.word	0x2000004c

080029c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029cc:	f7ff fff2 	bl	80029b4 <HAL_RCC_GetHCLKFreq>
 80029d0:	4602      	mov	r2, r0
 80029d2:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	0adb      	lsrs	r3, r3, #11
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	4903      	ldr	r1, [pc, #12]	; (80029ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80029de:	5ccb      	ldrb	r3, [r1, r3]
 80029e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40021000 	.word	0x40021000
 80029ec:	08003ccc 	.word	0x08003ccc

080029f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029f8:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <RCC_Delay+0x34>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a0a      	ldr	r2, [pc, #40]	; (8002a28 <RCC_Delay+0x38>)
 80029fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002a02:	0a5b      	lsrs	r3, r3, #9
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	fb02 f303 	mul.w	r3, r2, r3
 8002a0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a0c:	bf00      	nop
  }
  while (Delay --);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	1e5a      	subs	r2, r3, #1
 8002a12:	60fa      	str	r2, [r7, #12]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1f9      	bne.n	8002a0c <RCC_Delay+0x1c>
}
 8002a18:	bf00      	nop
 8002a1a:	bf00      	nop
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr
 8002a24:	2000004c 	.word	0x2000004c
 8002a28:	10624dd3 	.word	0x10624dd3

08002a2c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	613b      	str	r3, [r7, #16]
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d07d      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a4c:	4b4f      	ldr	r3, [pc, #316]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10d      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a58:	4b4c      	ldr	r3, [pc, #304]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	4a4b      	ldr	r2, [pc, #300]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a62:	61d3      	str	r3, [r2, #28]
 8002a64:	4b49      	ldr	r3, [pc, #292]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a66:	69db      	ldr	r3, [r3, #28]
 8002a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6c:	60bb      	str	r3, [r7, #8]
 8002a6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a70:	2301      	movs	r3, #1
 8002a72:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a74:	4b46      	ldr	r3, [pc, #280]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d118      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a80:	4b43      	ldr	r3, [pc, #268]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a42      	ldr	r2, [pc, #264]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a8c:	f7fe fd00 	bl	8001490 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a92:	e008      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a94:	f7fe fcfc 	bl	8001490 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b64      	cmp	r3, #100	; 0x64
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e06d      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa6:	4b3a      	ldr	r3, [pc, #232]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0f0      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ab2:	4b36      	ldr	r3, [pc, #216]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d02e      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d027      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ad0:	4b2e      	ldr	r3, [pc, #184]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ad8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ada:	4b2e      	ldr	r3, [pc, #184]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ae0:	4b2c      	ldr	r3, [pc, #176]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ae6:	4a29      	ldr	r2, [pc, #164]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d014      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af6:	f7fe fccb 	bl	8001490 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002afc:	e00a      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002afe:	f7fe fcc7 	bl	8001490 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e036      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b14:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0ee      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b20:	4b1a      	ldr	r3, [pc, #104]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	4917      	ldr	r1, [pc, #92]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b32:	7dfb      	ldrb	r3, [r7, #23]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d105      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b38:	4b14      	ldr	r3, [pc, #80]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	4a13      	ldr	r2, [pc, #76]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b42:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b50:	4b0e      	ldr	r3, [pc, #56]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	490b      	ldr	r1, [pc, #44]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0310 	and.w	r3, r3, #16
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d008      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b6e:	4b07      	ldr	r3, [pc, #28]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	4904      	ldr	r1, [pc, #16]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	40007000 	.word	0x40007000
 8002b94:	42420440 	.word	0x42420440

08002b98 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	61fb      	str	r3, [r7, #28]
 8002ba8:	2300      	movs	r3, #0
 8002baa:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b10      	cmp	r3, #16
 8002bb8:	d00a      	beq.n	8002bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b10      	cmp	r3, #16
 8002bbe:	f200 808a 	bhi.w	8002cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d045      	beq.n	8002c54 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d075      	beq.n	8002cba <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002bce:	e082      	b.n	8002cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002bd0:	4b46      	ldr	r3, [pc, #280]	; (8002cec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002bd6:	4b45      	ldr	r3, [pc, #276]	; (8002cec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d07b      	beq.n	8002cda <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	0c9b      	lsrs	r3, r3, #18
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	4a41      	ldr	r2, [pc, #260]	; (8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002bec:	5cd3      	ldrb	r3, [r2, r3]
 8002bee:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d015      	beq.n	8002c26 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bfa:	4b3c      	ldr	r3, [pc, #240]	; (8002cec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	0c5b      	lsrs	r3, r3, #17
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	4a3b      	ldr	r2, [pc, #236]	; (8002cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002c06:	5cd3      	ldrb	r3, [r2, r3]
 8002c08:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00d      	beq.n	8002c30 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002c14:	4a38      	ldr	r2, [pc, #224]	; (8002cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	fb02 f303 	mul.w	r3, r2, r3
 8002c22:	61fb      	str	r3, [r7, #28]
 8002c24:	e004      	b.n	8002c30 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	4a34      	ldr	r2, [pc, #208]	; (8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002c2a:	fb02 f303 	mul.w	r3, r2, r3
 8002c2e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002c30:	4b2e      	ldr	r3, [pc, #184]	; (8002cec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c3c:	d102      	bne.n	8002c44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	61bb      	str	r3, [r7, #24]
      break;
 8002c42:	e04a      	b.n	8002cda <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	4a2d      	ldr	r2, [pc, #180]	; (8002d00 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4e:	085b      	lsrs	r3, r3, #1
 8002c50:	61bb      	str	r3, [r7, #24]
      break;
 8002c52:	e042      	b.n	8002cda <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002c54:	4b25      	ldr	r3, [pc, #148]	; (8002cec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c64:	d108      	bne.n	8002c78 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002c70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c74:	61bb      	str	r3, [r7, #24]
 8002c76:	e01f      	b.n	8002cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c82:	d109      	bne.n	8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002c84:	4b19      	ldr	r3, [pc, #100]	; (8002cec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002c90:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002c94:	61bb      	str	r3, [r7, #24]
 8002c96:	e00f      	b.n	8002cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ca2:	d11c      	bne.n	8002cde <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002ca4:	4b11      	ldr	r3, [pc, #68]	; (8002cec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d016      	beq.n	8002cde <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002cb0:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002cb4:	61bb      	str	r3, [r7, #24]
      break;
 8002cb6:	e012      	b.n	8002cde <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002cb8:	e011      	b.n	8002cde <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002cba:	f7ff fe85 	bl	80029c8 <HAL_RCC_GetPCLK2Freq>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	0b9b      	lsrs	r3, r3, #14
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	3301      	adds	r3, #1
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd2:	61bb      	str	r3, [r7, #24]
      break;
 8002cd4:	e004      	b.n	8002ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002cd6:	bf00      	nop
 8002cd8:	e002      	b.n	8002ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002cda:	bf00      	nop
 8002cdc:	e000      	b.n	8002ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002cde:	bf00      	nop
    }
  }
  return (frequency);
 8002ce0:	69bb      	ldr	r3, [r7, #24]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3720      	adds	r7, #32
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	08003ce8 	.word	0x08003ce8
 8002cf4:	08003cf8 	.word	0x08003cf8
 8002cf8:	007a1200 	.word	0x007a1200
 8002cfc:	003d0900 	.word	0x003d0900
 8002d00:	aaaaaaab 	.word	0xaaaaaaab

08002d04 <std>:
 8002d04:	2300      	movs	r3, #0
 8002d06:	b510      	push	{r4, lr}
 8002d08:	4604      	mov	r4, r0
 8002d0a:	e9c0 3300 	strd	r3, r3, [r0]
 8002d0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d12:	6083      	str	r3, [r0, #8]
 8002d14:	8181      	strh	r1, [r0, #12]
 8002d16:	6643      	str	r3, [r0, #100]	; 0x64
 8002d18:	81c2      	strh	r2, [r0, #14]
 8002d1a:	6183      	str	r3, [r0, #24]
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	2208      	movs	r2, #8
 8002d20:	305c      	adds	r0, #92	; 0x5c
 8002d22:	f000 f90e 	bl	8002f42 <memset>
 8002d26:	4b0d      	ldr	r3, [pc, #52]	; (8002d5c <std+0x58>)
 8002d28:	6224      	str	r4, [r4, #32]
 8002d2a:	6263      	str	r3, [r4, #36]	; 0x24
 8002d2c:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <std+0x5c>)
 8002d2e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002d30:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <std+0x60>)
 8002d32:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002d34:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <std+0x64>)
 8002d36:	6323      	str	r3, [r4, #48]	; 0x30
 8002d38:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <std+0x68>)
 8002d3a:	429c      	cmp	r4, r3
 8002d3c:	d006      	beq.n	8002d4c <std+0x48>
 8002d3e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002d42:	4294      	cmp	r4, r2
 8002d44:	d002      	beq.n	8002d4c <std+0x48>
 8002d46:	33d0      	adds	r3, #208	; 0xd0
 8002d48:	429c      	cmp	r4, r3
 8002d4a:	d105      	bne.n	8002d58 <std+0x54>
 8002d4c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d54:	f000 b96e 	b.w	8003034 <__retarget_lock_init_recursive>
 8002d58:	bd10      	pop	{r4, pc}
 8002d5a:	bf00      	nop
 8002d5c:	08002ebd 	.word	0x08002ebd
 8002d60:	08002edf 	.word	0x08002edf
 8002d64:	08002f17 	.word	0x08002f17
 8002d68:	08002f3b 	.word	0x08002f3b
 8002d6c:	2000014c 	.word	0x2000014c

08002d70 <stdio_exit_handler>:
 8002d70:	4a02      	ldr	r2, [pc, #8]	; (8002d7c <stdio_exit_handler+0xc>)
 8002d72:	4903      	ldr	r1, [pc, #12]	; (8002d80 <stdio_exit_handler+0x10>)
 8002d74:	4803      	ldr	r0, [pc, #12]	; (8002d84 <stdio_exit_handler+0x14>)
 8002d76:	f000 b869 	b.w	8002e4c <_fwalk_sglue>
 8002d7a:	bf00      	nop
 8002d7c:	20000058 	.word	0x20000058
 8002d80:	080038d5 	.word	0x080038d5
 8002d84:	20000064 	.word	0x20000064

08002d88 <cleanup_stdio>:
 8002d88:	6841      	ldr	r1, [r0, #4]
 8002d8a:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <cleanup_stdio+0x34>)
 8002d8c:	b510      	push	{r4, lr}
 8002d8e:	4299      	cmp	r1, r3
 8002d90:	4604      	mov	r4, r0
 8002d92:	d001      	beq.n	8002d98 <cleanup_stdio+0x10>
 8002d94:	f000 fd9e 	bl	80038d4 <_fflush_r>
 8002d98:	68a1      	ldr	r1, [r4, #8]
 8002d9a:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <cleanup_stdio+0x38>)
 8002d9c:	4299      	cmp	r1, r3
 8002d9e:	d002      	beq.n	8002da6 <cleanup_stdio+0x1e>
 8002da0:	4620      	mov	r0, r4
 8002da2:	f000 fd97 	bl	80038d4 <_fflush_r>
 8002da6:	68e1      	ldr	r1, [r4, #12]
 8002da8:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <cleanup_stdio+0x3c>)
 8002daa:	4299      	cmp	r1, r3
 8002dac:	d004      	beq.n	8002db8 <cleanup_stdio+0x30>
 8002dae:	4620      	mov	r0, r4
 8002db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002db4:	f000 bd8e 	b.w	80038d4 <_fflush_r>
 8002db8:	bd10      	pop	{r4, pc}
 8002dba:	bf00      	nop
 8002dbc:	2000014c 	.word	0x2000014c
 8002dc0:	200001b4 	.word	0x200001b4
 8002dc4:	2000021c 	.word	0x2000021c

08002dc8 <global_stdio_init.part.0>:
 8002dc8:	b510      	push	{r4, lr}
 8002dca:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <global_stdio_init.part.0+0x30>)
 8002dcc:	4c0b      	ldr	r4, [pc, #44]	; (8002dfc <global_stdio_init.part.0+0x34>)
 8002dce:	4a0c      	ldr	r2, [pc, #48]	; (8002e00 <global_stdio_init.part.0+0x38>)
 8002dd0:	4620      	mov	r0, r4
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	2104      	movs	r1, #4
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f7ff ff94 	bl	8002d04 <std>
 8002ddc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002de0:	2201      	movs	r2, #1
 8002de2:	2109      	movs	r1, #9
 8002de4:	f7ff ff8e 	bl	8002d04 <std>
 8002de8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002dec:	2202      	movs	r2, #2
 8002dee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002df2:	2112      	movs	r1, #18
 8002df4:	f7ff bf86 	b.w	8002d04 <std>
 8002df8:	20000284 	.word	0x20000284
 8002dfc:	2000014c 	.word	0x2000014c
 8002e00:	08002d71 	.word	0x08002d71

08002e04 <__sfp_lock_acquire>:
 8002e04:	4801      	ldr	r0, [pc, #4]	; (8002e0c <__sfp_lock_acquire+0x8>)
 8002e06:	f000 b916 	b.w	8003036 <__retarget_lock_acquire_recursive>
 8002e0a:	bf00      	nop
 8002e0c:	2000028d 	.word	0x2000028d

08002e10 <__sfp_lock_release>:
 8002e10:	4801      	ldr	r0, [pc, #4]	; (8002e18 <__sfp_lock_release+0x8>)
 8002e12:	f000 b911 	b.w	8003038 <__retarget_lock_release_recursive>
 8002e16:	bf00      	nop
 8002e18:	2000028d 	.word	0x2000028d

08002e1c <__sinit>:
 8002e1c:	b510      	push	{r4, lr}
 8002e1e:	4604      	mov	r4, r0
 8002e20:	f7ff fff0 	bl	8002e04 <__sfp_lock_acquire>
 8002e24:	6a23      	ldr	r3, [r4, #32]
 8002e26:	b11b      	cbz	r3, 8002e30 <__sinit+0x14>
 8002e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e2c:	f7ff bff0 	b.w	8002e10 <__sfp_lock_release>
 8002e30:	4b04      	ldr	r3, [pc, #16]	; (8002e44 <__sinit+0x28>)
 8002e32:	6223      	str	r3, [r4, #32]
 8002e34:	4b04      	ldr	r3, [pc, #16]	; (8002e48 <__sinit+0x2c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1f5      	bne.n	8002e28 <__sinit+0xc>
 8002e3c:	f7ff ffc4 	bl	8002dc8 <global_stdio_init.part.0>
 8002e40:	e7f2      	b.n	8002e28 <__sinit+0xc>
 8002e42:	bf00      	nop
 8002e44:	08002d89 	.word	0x08002d89
 8002e48:	20000284 	.word	0x20000284

08002e4c <_fwalk_sglue>:
 8002e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e50:	4607      	mov	r7, r0
 8002e52:	4688      	mov	r8, r1
 8002e54:	4614      	mov	r4, r2
 8002e56:	2600      	movs	r6, #0
 8002e58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002e5c:	f1b9 0901 	subs.w	r9, r9, #1
 8002e60:	d505      	bpl.n	8002e6e <_fwalk_sglue+0x22>
 8002e62:	6824      	ldr	r4, [r4, #0]
 8002e64:	2c00      	cmp	r4, #0
 8002e66:	d1f7      	bne.n	8002e58 <_fwalk_sglue+0xc>
 8002e68:	4630      	mov	r0, r6
 8002e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e6e:	89ab      	ldrh	r3, [r5, #12]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d907      	bls.n	8002e84 <_fwalk_sglue+0x38>
 8002e74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	d003      	beq.n	8002e84 <_fwalk_sglue+0x38>
 8002e7c:	4629      	mov	r1, r5
 8002e7e:	4638      	mov	r0, r7
 8002e80:	47c0      	blx	r8
 8002e82:	4306      	orrs	r6, r0
 8002e84:	3568      	adds	r5, #104	; 0x68
 8002e86:	e7e9      	b.n	8002e5c <_fwalk_sglue+0x10>

08002e88 <iprintf>:
 8002e88:	b40f      	push	{r0, r1, r2, r3}
 8002e8a:	b507      	push	{r0, r1, r2, lr}
 8002e8c:	4906      	ldr	r1, [pc, #24]	; (8002ea8 <iprintf+0x20>)
 8002e8e:	ab04      	add	r3, sp, #16
 8002e90:	6808      	ldr	r0, [r1, #0]
 8002e92:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e96:	6881      	ldr	r1, [r0, #8]
 8002e98:	9301      	str	r3, [sp, #4]
 8002e9a:	f000 f9eb 	bl	8003274 <_vfiprintf_r>
 8002e9e:	b003      	add	sp, #12
 8002ea0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ea4:	b004      	add	sp, #16
 8002ea6:	4770      	bx	lr
 8002ea8:	200000b0 	.word	0x200000b0

08002eac <putchar>:
 8002eac:	4b02      	ldr	r3, [pc, #8]	; (8002eb8 <putchar+0xc>)
 8002eae:	4601      	mov	r1, r0
 8002eb0:	6818      	ldr	r0, [r3, #0]
 8002eb2:	6882      	ldr	r2, [r0, #8]
 8002eb4:	f000 bd36 	b.w	8003924 <_putc_r>
 8002eb8:	200000b0 	.word	0x200000b0

08002ebc <__sread>:
 8002ebc:	b510      	push	{r4, lr}
 8002ebe:	460c      	mov	r4, r1
 8002ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ec4:	f000 f868 	bl	8002f98 <_read_r>
 8002ec8:	2800      	cmp	r0, #0
 8002eca:	bfab      	itete	ge
 8002ecc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002ece:	89a3      	ldrhlt	r3, [r4, #12]
 8002ed0:	181b      	addge	r3, r3, r0
 8002ed2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002ed6:	bfac      	ite	ge
 8002ed8:	6563      	strge	r3, [r4, #84]	; 0x54
 8002eda:	81a3      	strhlt	r3, [r4, #12]
 8002edc:	bd10      	pop	{r4, pc}

08002ede <__swrite>:
 8002ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ee2:	461f      	mov	r7, r3
 8002ee4:	898b      	ldrh	r3, [r1, #12]
 8002ee6:	4605      	mov	r5, r0
 8002ee8:	05db      	lsls	r3, r3, #23
 8002eea:	460c      	mov	r4, r1
 8002eec:	4616      	mov	r6, r2
 8002eee:	d505      	bpl.n	8002efc <__swrite+0x1e>
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ef8:	f000 f83c 	bl	8002f74 <_lseek_r>
 8002efc:	89a3      	ldrh	r3, [r4, #12]
 8002efe:	4632      	mov	r2, r6
 8002f00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f04:	81a3      	strh	r3, [r4, #12]
 8002f06:	4628      	mov	r0, r5
 8002f08:	463b      	mov	r3, r7
 8002f0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f12:	f000 b853 	b.w	8002fbc <_write_r>

08002f16 <__sseek>:
 8002f16:	b510      	push	{r4, lr}
 8002f18:	460c      	mov	r4, r1
 8002f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f1e:	f000 f829 	bl	8002f74 <_lseek_r>
 8002f22:	1c43      	adds	r3, r0, #1
 8002f24:	89a3      	ldrh	r3, [r4, #12]
 8002f26:	bf15      	itete	ne
 8002f28:	6560      	strne	r0, [r4, #84]	; 0x54
 8002f2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002f2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002f32:	81a3      	strheq	r3, [r4, #12]
 8002f34:	bf18      	it	ne
 8002f36:	81a3      	strhne	r3, [r4, #12]
 8002f38:	bd10      	pop	{r4, pc}

08002f3a <__sclose>:
 8002f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f3e:	f000 b809 	b.w	8002f54 <_close_r>

08002f42 <memset>:
 8002f42:	4603      	mov	r3, r0
 8002f44:	4402      	add	r2, r0
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d100      	bne.n	8002f4c <memset+0xa>
 8002f4a:	4770      	bx	lr
 8002f4c:	f803 1b01 	strb.w	r1, [r3], #1
 8002f50:	e7f9      	b.n	8002f46 <memset+0x4>
	...

08002f54 <_close_r>:
 8002f54:	b538      	push	{r3, r4, r5, lr}
 8002f56:	2300      	movs	r3, #0
 8002f58:	4d05      	ldr	r5, [pc, #20]	; (8002f70 <_close_r+0x1c>)
 8002f5a:	4604      	mov	r4, r0
 8002f5c:	4608      	mov	r0, r1
 8002f5e:	602b      	str	r3, [r5, #0]
 8002f60:	f7fe f9ac 	bl	80012bc <_close>
 8002f64:	1c43      	adds	r3, r0, #1
 8002f66:	d102      	bne.n	8002f6e <_close_r+0x1a>
 8002f68:	682b      	ldr	r3, [r5, #0]
 8002f6a:	b103      	cbz	r3, 8002f6e <_close_r+0x1a>
 8002f6c:	6023      	str	r3, [r4, #0]
 8002f6e:	bd38      	pop	{r3, r4, r5, pc}
 8002f70:	20000288 	.word	0x20000288

08002f74 <_lseek_r>:
 8002f74:	b538      	push	{r3, r4, r5, lr}
 8002f76:	4604      	mov	r4, r0
 8002f78:	4608      	mov	r0, r1
 8002f7a:	4611      	mov	r1, r2
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	4d05      	ldr	r5, [pc, #20]	; (8002f94 <_lseek_r+0x20>)
 8002f80:	602a      	str	r2, [r5, #0]
 8002f82:	461a      	mov	r2, r3
 8002f84:	f7fe f9be 	bl	8001304 <_lseek>
 8002f88:	1c43      	adds	r3, r0, #1
 8002f8a:	d102      	bne.n	8002f92 <_lseek_r+0x1e>
 8002f8c:	682b      	ldr	r3, [r5, #0]
 8002f8e:	b103      	cbz	r3, 8002f92 <_lseek_r+0x1e>
 8002f90:	6023      	str	r3, [r4, #0]
 8002f92:	bd38      	pop	{r3, r4, r5, pc}
 8002f94:	20000288 	.word	0x20000288

08002f98 <_read_r>:
 8002f98:	b538      	push	{r3, r4, r5, lr}
 8002f9a:	4604      	mov	r4, r0
 8002f9c:	4608      	mov	r0, r1
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	4d05      	ldr	r5, [pc, #20]	; (8002fb8 <_read_r+0x20>)
 8002fa4:	602a      	str	r2, [r5, #0]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	f7fe f94f 	bl	800124a <_read>
 8002fac:	1c43      	adds	r3, r0, #1
 8002fae:	d102      	bne.n	8002fb6 <_read_r+0x1e>
 8002fb0:	682b      	ldr	r3, [r5, #0]
 8002fb2:	b103      	cbz	r3, 8002fb6 <_read_r+0x1e>
 8002fb4:	6023      	str	r3, [r4, #0]
 8002fb6:	bd38      	pop	{r3, r4, r5, pc}
 8002fb8:	20000288 	.word	0x20000288

08002fbc <_write_r>:
 8002fbc:	b538      	push	{r3, r4, r5, lr}
 8002fbe:	4604      	mov	r4, r0
 8002fc0:	4608      	mov	r0, r1
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	4d05      	ldr	r5, [pc, #20]	; (8002fdc <_write_r+0x20>)
 8002fc8:	602a      	str	r2, [r5, #0]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	f7fe f95a 	bl	8001284 <_write>
 8002fd0:	1c43      	adds	r3, r0, #1
 8002fd2:	d102      	bne.n	8002fda <_write_r+0x1e>
 8002fd4:	682b      	ldr	r3, [r5, #0]
 8002fd6:	b103      	cbz	r3, 8002fda <_write_r+0x1e>
 8002fd8:	6023      	str	r3, [r4, #0]
 8002fda:	bd38      	pop	{r3, r4, r5, pc}
 8002fdc:	20000288 	.word	0x20000288

08002fe0 <__errno>:
 8002fe0:	4b01      	ldr	r3, [pc, #4]	; (8002fe8 <__errno+0x8>)
 8002fe2:	6818      	ldr	r0, [r3, #0]
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	200000b0 	.word	0x200000b0

08002fec <__libc_init_array>:
 8002fec:	b570      	push	{r4, r5, r6, lr}
 8002fee:	2600      	movs	r6, #0
 8002ff0:	4d0c      	ldr	r5, [pc, #48]	; (8003024 <__libc_init_array+0x38>)
 8002ff2:	4c0d      	ldr	r4, [pc, #52]	; (8003028 <__libc_init_array+0x3c>)
 8002ff4:	1b64      	subs	r4, r4, r5
 8002ff6:	10a4      	asrs	r4, r4, #2
 8002ff8:	42a6      	cmp	r6, r4
 8002ffa:	d109      	bne.n	8003010 <__libc_init_array+0x24>
 8002ffc:	f000 fdfe 	bl	8003bfc <_init>
 8003000:	2600      	movs	r6, #0
 8003002:	4d0a      	ldr	r5, [pc, #40]	; (800302c <__libc_init_array+0x40>)
 8003004:	4c0a      	ldr	r4, [pc, #40]	; (8003030 <__libc_init_array+0x44>)
 8003006:	1b64      	subs	r4, r4, r5
 8003008:	10a4      	asrs	r4, r4, #2
 800300a:	42a6      	cmp	r6, r4
 800300c:	d105      	bne.n	800301a <__libc_init_array+0x2e>
 800300e:	bd70      	pop	{r4, r5, r6, pc}
 8003010:	f855 3b04 	ldr.w	r3, [r5], #4
 8003014:	4798      	blx	r3
 8003016:	3601      	adds	r6, #1
 8003018:	e7ee      	b.n	8002ff8 <__libc_init_array+0xc>
 800301a:	f855 3b04 	ldr.w	r3, [r5], #4
 800301e:	4798      	blx	r3
 8003020:	3601      	adds	r6, #1
 8003022:	e7f2      	b.n	800300a <__libc_init_array+0x1e>
 8003024:	08003d30 	.word	0x08003d30
 8003028:	08003d30 	.word	0x08003d30
 800302c:	08003d30 	.word	0x08003d30
 8003030:	08003d34 	.word	0x08003d34

08003034 <__retarget_lock_init_recursive>:
 8003034:	4770      	bx	lr

08003036 <__retarget_lock_acquire_recursive>:
 8003036:	4770      	bx	lr

08003038 <__retarget_lock_release_recursive>:
 8003038:	4770      	bx	lr
	...

0800303c <_free_r>:
 800303c:	b538      	push	{r3, r4, r5, lr}
 800303e:	4605      	mov	r5, r0
 8003040:	2900      	cmp	r1, #0
 8003042:	d040      	beq.n	80030c6 <_free_r+0x8a>
 8003044:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003048:	1f0c      	subs	r4, r1, #4
 800304a:	2b00      	cmp	r3, #0
 800304c:	bfb8      	it	lt
 800304e:	18e4      	addlt	r4, r4, r3
 8003050:	f000 f8dc 	bl	800320c <__malloc_lock>
 8003054:	4a1c      	ldr	r2, [pc, #112]	; (80030c8 <_free_r+0x8c>)
 8003056:	6813      	ldr	r3, [r2, #0]
 8003058:	b933      	cbnz	r3, 8003068 <_free_r+0x2c>
 800305a:	6063      	str	r3, [r4, #4]
 800305c:	6014      	str	r4, [r2, #0]
 800305e:	4628      	mov	r0, r5
 8003060:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003064:	f000 b8d8 	b.w	8003218 <__malloc_unlock>
 8003068:	42a3      	cmp	r3, r4
 800306a:	d908      	bls.n	800307e <_free_r+0x42>
 800306c:	6820      	ldr	r0, [r4, #0]
 800306e:	1821      	adds	r1, r4, r0
 8003070:	428b      	cmp	r3, r1
 8003072:	bf01      	itttt	eq
 8003074:	6819      	ldreq	r1, [r3, #0]
 8003076:	685b      	ldreq	r3, [r3, #4]
 8003078:	1809      	addeq	r1, r1, r0
 800307a:	6021      	streq	r1, [r4, #0]
 800307c:	e7ed      	b.n	800305a <_free_r+0x1e>
 800307e:	461a      	mov	r2, r3
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	b10b      	cbz	r3, 8003088 <_free_r+0x4c>
 8003084:	42a3      	cmp	r3, r4
 8003086:	d9fa      	bls.n	800307e <_free_r+0x42>
 8003088:	6811      	ldr	r1, [r2, #0]
 800308a:	1850      	adds	r0, r2, r1
 800308c:	42a0      	cmp	r0, r4
 800308e:	d10b      	bne.n	80030a8 <_free_r+0x6c>
 8003090:	6820      	ldr	r0, [r4, #0]
 8003092:	4401      	add	r1, r0
 8003094:	1850      	adds	r0, r2, r1
 8003096:	4283      	cmp	r3, r0
 8003098:	6011      	str	r1, [r2, #0]
 800309a:	d1e0      	bne.n	800305e <_free_r+0x22>
 800309c:	6818      	ldr	r0, [r3, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	4408      	add	r0, r1
 80030a2:	6010      	str	r0, [r2, #0]
 80030a4:	6053      	str	r3, [r2, #4]
 80030a6:	e7da      	b.n	800305e <_free_r+0x22>
 80030a8:	d902      	bls.n	80030b0 <_free_r+0x74>
 80030aa:	230c      	movs	r3, #12
 80030ac:	602b      	str	r3, [r5, #0]
 80030ae:	e7d6      	b.n	800305e <_free_r+0x22>
 80030b0:	6820      	ldr	r0, [r4, #0]
 80030b2:	1821      	adds	r1, r4, r0
 80030b4:	428b      	cmp	r3, r1
 80030b6:	bf01      	itttt	eq
 80030b8:	6819      	ldreq	r1, [r3, #0]
 80030ba:	685b      	ldreq	r3, [r3, #4]
 80030bc:	1809      	addeq	r1, r1, r0
 80030be:	6021      	streq	r1, [r4, #0]
 80030c0:	6063      	str	r3, [r4, #4]
 80030c2:	6054      	str	r4, [r2, #4]
 80030c4:	e7cb      	b.n	800305e <_free_r+0x22>
 80030c6:	bd38      	pop	{r3, r4, r5, pc}
 80030c8:	20000290 	.word	0x20000290

080030cc <sbrk_aligned>:
 80030cc:	b570      	push	{r4, r5, r6, lr}
 80030ce:	4e0e      	ldr	r6, [pc, #56]	; (8003108 <sbrk_aligned+0x3c>)
 80030d0:	460c      	mov	r4, r1
 80030d2:	6831      	ldr	r1, [r6, #0]
 80030d4:	4605      	mov	r5, r0
 80030d6:	b911      	cbnz	r1, 80030de <sbrk_aligned+0x12>
 80030d8:	f000 fcee 	bl	8003ab8 <_sbrk_r>
 80030dc:	6030      	str	r0, [r6, #0]
 80030de:	4621      	mov	r1, r4
 80030e0:	4628      	mov	r0, r5
 80030e2:	f000 fce9 	bl	8003ab8 <_sbrk_r>
 80030e6:	1c43      	adds	r3, r0, #1
 80030e8:	d00a      	beq.n	8003100 <sbrk_aligned+0x34>
 80030ea:	1cc4      	adds	r4, r0, #3
 80030ec:	f024 0403 	bic.w	r4, r4, #3
 80030f0:	42a0      	cmp	r0, r4
 80030f2:	d007      	beq.n	8003104 <sbrk_aligned+0x38>
 80030f4:	1a21      	subs	r1, r4, r0
 80030f6:	4628      	mov	r0, r5
 80030f8:	f000 fcde 	bl	8003ab8 <_sbrk_r>
 80030fc:	3001      	adds	r0, #1
 80030fe:	d101      	bne.n	8003104 <sbrk_aligned+0x38>
 8003100:	f04f 34ff 	mov.w	r4, #4294967295
 8003104:	4620      	mov	r0, r4
 8003106:	bd70      	pop	{r4, r5, r6, pc}
 8003108:	20000294 	.word	0x20000294

0800310c <_malloc_r>:
 800310c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003110:	1ccd      	adds	r5, r1, #3
 8003112:	f025 0503 	bic.w	r5, r5, #3
 8003116:	3508      	adds	r5, #8
 8003118:	2d0c      	cmp	r5, #12
 800311a:	bf38      	it	cc
 800311c:	250c      	movcc	r5, #12
 800311e:	2d00      	cmp	r5, #0
 8003120:	4607      	mov	r7, r0
 8003122:	db01      	blt.n	8003128 <_malloc_r+0x1c>
 8003124:	42a9      	cmp	r1, r5
 8003126:	d905      	bls.n	8003134 <_malloc_r+0x28>
 8003128:	230c      	movs	r3, #12
 800312a:	2600      	movs	r6, #0
 800312c:	603b      	str	r3, [r7, #0]
 800312e:	4630      	mov	r0, r6
 8003130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003134:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003208 <_malloc_r+0xfc>
 8003138:	f000 f868 	bl	800320c <__malloc_lock>
 800313c:	f8d8 3000 	ldr.w	r3, [r8]
 8003140:	461c      	mov	r4, r3
 8003142:	bb5c      	cbnz	r4, 800319c <_malloc_r+0x90>
 8003144:	4629      	mov	r1, r5
 8003146:	4638      	mov	r0, r7
 8003148:	f7ff ffc0 	bl	80030cc <sbrk_aligned>
 800314c:	1c43      	adds	r3, r0, #1
 800314e:	4604      	mov	r4, r0
 8003150:	d155      	bne.n	80031fe <_malloc_r+0xf2>
 8003152:	f8d8 4000 	ldr.w	r4, [r8]
 8003156:	4626      	mov	r6, r4
 8003158:	2e00      	cmp	r6, #0
 800315a:	d145      	bne.n	80031e8 <_malloc_r+0xdc>
 800315c:	2c00      	cmp	r4, #0
 800315e:	d048      	beq.n	80031f2 <_malloc_r+0xe6>
 8003160:	6823      	ldr	r3, [r4, #0]
 8003162:	4631      	mov	r1, r6
 8003164:	4638      	mov	r0, r7
 8003166:	eb04 0903 	add.w	r9, r4, r3
 800316a:	f000 fca5 	bl	8003ab8 <_sbrk_r>
 800316e:	4581      	cmp	r9, r0
 8003170:	d13f      	bne.n	80031f2 <_malloc_r+0xe6>
 8003172:	6821      	ldr	r1, [r4, #0]
 8003174:	4638      	mov	r0, r7
 8003176:	1a6d      	subs	r5, r5, r1
 8003178:	4629      	mov	r1, r5
 800317a:	f7ff ffa7 	bl	80030cc <sbrk_aligned>
 800317e:	3001      	adds	r0, #1
 8003180:	d037      	beq.n	80031f2 <_malloc_r+0xe6>
 8003182:	6823      	ldr	r3, [r4, #0]
 8003184:	442b      	add	r3, r5
 8003186:	6023      	str	r3, [r4, #0]
 8003188:	f8d8 3000 	ldr.w	r3, [r8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d038      	beq.n	8003202 <_malloc_r+0xf6>
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	42a2      	cmp	r2, r4
 8003194:	d12b      	bne.n	80031ee <_malloc_r+0xe2>
 8003196:	2200      	movs	r2, #0
 8003198:	605a      	str	r2, [r3, #4]
 800319a:	e00f      	b.n	80031bc <_malloc_r+0xb0>
 800319c:	6822      	ldr	r2, [r4, #0]
 800319e:	1b52      	subs	r2, r2, r5
 80031a0:	d41f      	bmi.n	80031e2 <_malloc_r+0xd6>
 80031a2:	2a0b      	cmp	r2, #11
 80031a4:	d917      	bls.n	80031d6 <_malloc_r+0xca>
 80031a6:	1961      	adds	r1, r4, r5
 80031a8:	42a3      	cmp	r3, r4
 80031aa:	6025      	str	r5, [r4, #0]
 80031ac:	bf18      	it	ne
 80031ae:	6059      	strne	r1, [r3, #4]
 80031b0:	6863      	ldr	r3, [r4, #4]
 80031b2:	bf08      	it	eq
 80031b4:	f8c8 1000 	streq.w	r1, [r8]
 80031b8:	5162      	str	r2, [r4, r5]
 80031ba:	604b      	str	r3, [r1, #4]
 80031bc:	4638      	mov	r0, r7
 80031be:	f104 060b 	add.w	r6, r4, #11
 80031c2:	f000 f829 	bl	8003218 <__malloc_unlock>
 80031c6:	f026 0607 	bic.w	r6, r6, #7
 80031ca:	1d23      	adds	r3, r4, #4
 80031cc:	1af2      	subs	r2, r6, r3
 80031ce:	d0ae      	beq.n	800312e <_malloc_r+0x22>
 80031d0:	1b9b      	subs	r3, r3, r6
 80031d2:	50a3      	str	r3, [r4, r2]
 80031d4:	e7ab      	b.n	800312e <_malloc_r+0x22>
 80031d6:	42a3      	cmp	r3, r4
 80031d8:	6862      	ldr	r2, [r4, #4]
 80031da:	d1dd      	bne.n	8003198 <_malloc_r+0x8c>
 80031dc:	f8c8 2000 	str.w	r2, [r8]
 80031e0:	e7ec      	b.n	80031bc <_malloc_r+0xb0>
 80031e2:	4623      	mov	r3, r4
 80031e4:	6864      	ldr	r4, [r4, #4]
 80031e6:	e7ac      	b.n	8003142 <_malloc_r+0x36>
 80031e8:	4634      	mov	r4, r6
 80031ea:	6876      	ldr	r6, [r6, #4]
 80031ec:	e7b4      	b.n	8003158 <_malloc_r+0x4c>
 80031ee:	4613      	mov	r3, r2
 80031f0:	e7cc      	b.n	800318c <_malloc_r+0x80>
 80031f2:	230c      	movs	r3, #12
 80031f4:	4638      	mov	r0, r7
 80031f6:	603b      	str	r3, [r7, #0]
 80031f8:	f000 f80e 	bl	8003218 <__malloc_unlock>
 80031fc:	e797      	b.n	800312e <_malloc_r+0x22>
 80031fe:	6025      	str	r5, [r4, #0]
 8003200:	e7dc      	b.n	80031bc <_malloc_r+0xb0>
 8003202:	605b      	str	r3, [r3, #4]
 8003204:	deff      	udf	#255	; 0xff
 8003206:	bf00      	nop
 8003208:	20000290 	.word	0x20000290

0800320c <__malloc_lock>:
 800320c:	4801      	ldr	r0, [pc, #4]	; (8003214 <__malloc_lock+0x8>)
 800320e:	f7ff bf12 	b.w	8003036 <__retarget_lock_acquire_recursive>
 8003212:	bf00      	nop
 8003214:	2000028c 	.word	0x2000028c

08003218 <__malloc_unlock>:
 8003218:	4801      	ldr	r0, [pc, #4]	; (8003220 <__malloc_unlock+0x8>)
 800321a:	f7ff bf0d 	b.w	8003038 <__retarget_lock_release_recursive>
 800321e:	bf00      	nop
 8003220:	2000028c 	.word	0x2000028c

08003224 <__sfputc_r>:
 8003224:	6893      	ldr	r3, [r2, #8]
 8003226:	b410      	push	{r4}
 8003228:	3b01      	subs	r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	6093      	str	r3, [r2, #8]
 800322e:	da07      	bge.n	8003240 <__sfputc_r+0x1c>
 8003230:	6994      	ldr	r4, [r2, #24]
 8003232:	42a3      	cmp	r3, r4
 8003234:	db01      	blt.n	800323a <__sfputc_r+0x16>
 8003236:	290a      	cmp	r1, #10
 8003238:	d102      	bne.n	8003240 <__sfputc_r+0x1c>
 800323a:	bc10      	pop	{r4}
 800323c:	f000 bba6 	b.w	800398c <__swbuf_r>
 8003240:	6813      	ldr	r3, [r2, #0]
 8003242:	1c58      	adds	r0, r3, #1
 8003244:	6010      	str	r0, [r2, #0]
 8003246:	7019      	strb	r1, [r3, #0]
 8003248:	4608      	mov	r0, r1
 800324a:	bc10      	pop	{r4}
 800324c:	4770      	bx	lr

0800324e <__sfputs_r>:
 800324e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003250:	4606      	mov	r6, r0
 8003252:	460f      	mov	r7, r1
 8003254:	4614      	mov	r4, r2
 8003256:	18d5      	adds	r5, r2, r3
 8003258:	42ac      	cmp	r4, r5
 800325a:	d101      	bne.n	8003260 <__sfputs_r+0x12>
 800325c:	2000      	movs	r0, #0
 800325e:	e007      	b.n	8003270 <__sfputs_r+0x22>
 8003260:	463a      	mov	r2, r7
 8003262:	4630      	mov	r0, r6
 8003264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003268:	f7ff ffdc 	bl	8003224 <__sfputc_r>
 800326c:	1c43      	adds	r3, r0, #1
 800326e:	d1f3      	bne.n	8003258 <__sfputs_r+0xa>
 8003270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003274 <_vfiprintf_r>:
 8003274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003278:	460d      	mov	r5, r1
 800327a:	4614      	mov	r4, r2
 800327c:	4698      	mov	r8, r3
 800327e:	4606      	mov	r6, r0
 8003280:	b09d      	sub	sp, #116	; 0x74
 8003282:	b118      	cbz	r0, 800328c <_vfiprintf_r+0x18>
 8003284:	6a03      	ldr	r3, [r0, #32]
 8003286:	b90b      	cbnz	r3, 800328c <_vfiprintf_r+0x18>
 8003288:	f7ff fdc8 	bl	8002e1c <__sinit>
 800328c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800328e:	07d9      	lsls	r1, r3, #31
 8003290:	d405      	bmi.n	800329e <_vfiprintf_r+0x2a>
 8003292:	89ab      	ldrh	r3, [r5, #12]
 8003294:	059a      	lsls	r2, r3, #22
 8003296:	d402      	bmi.n	800329e <_vfiprintf_r+0x2a>
 8003298:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800329a:	f7ff fecc 	bl	8003036 <__retarget_lock_acquire_recursive>
 800329e:	89ab      	ldrh	r3, [r5, #12]
 80032a0:	071b      	lsls	r3, r3, #28
 80032a2:	d501      	bpl.n	80032a8 <_vfiprintf_r+0x34>
 80032a4:	692b      	ldr	r3, [r5, #16]
 80032a6:	b99b      	cbnz	r3, 80032d0 <_vfiprintf_r+0x5c>
 80032a8:	4629      	mov	r1, r5
 80032aa:	4630      	mov	r0, r6
 80032ac:	f000 fbac 	bl	8003a08 <__swsetup_r>
 80032b0:	b170      	cbz	r0, 80032d0 <_vfiprintf_r+0x5c>
 80032b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80032b4:	07dc      	lsls	r4, r3, #31
 80032b6:	d504      	bpl.n	80032c2 <_vfiprintf_r+0x4e>
 80032b8:	f04f 30ff 	mov.w	r0, #4294967295
 80032bc:	b01d      	add	sp, #116	; 0x74
 80032be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032c2:	89ab      	ldrh	r3, [r5, #12]
 80032c4:	0598      	lsls	r0, r3, #22
 80032c6:	d4f7      	bmi.n	80032b8 <_vfiprintf_r+0x44>
 80032c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80032ca:	f7ff feb5 	bl	8003038 <__retarget_lock_release_recursive>
 80032ce:	e7f3      	b.n	80032b8 <_vfiprintf_r+0x44>
 80032d0:	2300      	movs	r3, #0
 80032d2:	9309      	str	r3, [sp, #36]	; 0x24
 80032d4:	2320      	movs	r3, #32
 80032d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032da:	2330      	movs	r3, #48	; 0x30
 80032dc:	f04f 0901 	mov.w	r9, #1
 80032e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80032e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8003494 <_vfiprintf_r+0x220>
 80032e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032ec:	4623      	mov	r3, r4
 80032ee:	469a      	mov	sl, r3
 80032f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032f4:	b10a      	cbz	r2, 80032fa <_vfiprintf_r+0x86>
 80032f6:	2a25      	cmp	r2, #37	; 0x25
 80032f8:	d1f9      	bne.n	80032ee <_vfiprintf_r+0x7a>
 80032fa:	ebba 0b04 	subs.w	fp, sl, r4
 80032fe:	d00b      	beq.n	8003318 <_vfiprintf_r+0xa4>
 8003300:	465b      	mov	r3, fp
 8003302:	4622      	mov	r2, r4
 8003304:	4629      	mov	r1, r5
 8003306:	4630      	mov	r0, r6
 8003308:	f7ff ffa1 	bl	800324e <__sfputs_r>
 800330c:	3001      	adds	r0, #1
 800330e:	f000 80a9 	beq.w	8003464 <_vfiprintf_r+0x1f0>
 8003312:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003314:	445a      	add	r2, fp
 8003316:	9209      	str	r2, [sp, #36]	; 0x24
 8003318:	f89a 3000 	ldrb.w	r3, [sl]
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 80a1 	beq.w	8003464 <_vfiprintf_r+0x1f0>
 8003322:	2300      	movs	r3, #0
 8003324:	f04f 32ff 	mov.w	r2, #4294967295
 8003328:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800332c:	f10a 0a01 	add.w	sl, sl, #1
 8003330:	9304      	str	r3, [sp, #16]
 8003332:	9307      	str	r3, [sp, #28]
 8003334:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003338:	931a      	str	r3, [sp, #104]	; 0x68
 800333a:	4654      	mov	r4, sl
 800333c:	2205      	movs	r2, #5
 800333e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003342:	4854      	ldr	r0, [pc, #336]	; (8003494 <_vfiprintf_r+0x220>)
 8003344:	f000 fbc8 	bl	8003ad8 <memchr>
 8003348:	9a04      	ldr	r2, [sp, #16]
 800334a:	b9d8      	cbnz	r0, 8003384 <_vfiprintf_r+0x110>
 800334c:	06d1      	lsls	r1, r2, #27
 800334e:	bf44      	itt	mi
 8003350:	2320      	movmi	r3, #32
 8003352:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003356:	0713      	lsls	r3, r2, #28
 8003358:	bf44      	itt	mi
 800335a:	232b      	movmi	r3, #43	; 0x2b
 800335c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003360:	f89a 3000 	ldrb.w	r3, [sl]
 8003364:	2b2a      	cmp	r3, #42	; 0x2a
 8003366:	d015      	beq.n	8003394 <_vfiprintf_r+0x120>
 8003368:	4654      	mov	r4, sl
 800336a:	2000      	movs	r0, #0
 800336c:	f04f 0c0a 	mov.w	ip, #10
 8003370:	9a07      	ldr	r2, [sp, #28]
 8003372:	4621      	mov	r1, r4
 8003374:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003378:	3b30      	subs	r3, #48	; 0x30
 800337a:	2b09      	cmp	r3, #9
 800337c:	d94d      	bls.n	800341a <_vfiprintf_r+0x1a6>
 800337e:	b1b0      	cbz	r0, 80033ae <_vfiprintf_r+0x13a>
 8003380:	9207      	str	r2, [sp, #28]
 8003382:	e014      	b.n	80033ae <_vfiprintf_r+0x13a>
 8003384:	eba0 0308 	sub.w	r3, r0, r8
 8003388:	fa09 f303 	lsl.w	r3, r9, r3
 800338c:	4313      	orrs	r3, r2
 800338e:	46a2      	mov	sl, r4
 8003390:	9304      	str	r3, [sp, #16]
 8003392:	e7d2      	b.n	800333a <_vfiprintf_r+0xc6>
 8003394:	9b03      	ldr	r3, [sp, #12]
 8003396:	1d19      	adds	r1, r3, #4
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	9103      	str	r1, [sp, #12]
 800339c:	2b00      	cmp	r3, #0
 800339e:	bfbb      	ittet	lt
 80033a0:	425b      	neglt	r3, r3
 80033a2:	f042 0202 	orrlt.w	r2, r2, #2
 80033a6:	9307      	strge	r3, [sp, #28]
 80033a8:	9307      	strlt	r3, [sp, #28]
 80033aa:	bfb8      	it	lt
 80033ac:	9204      	strlt	r2, [sp, #16]
 80033ae:	7823      	ldrb	r3, [r4, #0]
 80033b0:	2b2e      	cmp	r3, #46	; 0x2e
 80033b2:	d10c      	bne.n	80033ce <_vfiprintf_r+0x15a>
 80033b4:	7863      	ldrb	r3, [r4, #1]
 80033b6:	2b2a      	cmp	r3, #42	; 0x2a
 80033b8:	d134      	bne.n	8003424 <_vfiprintf_r+0x1b0>
 80033ba:	9b03      	ldr	r3, [sp, #12]
 80033bc:	3402      	adds	r4, #2
 80033be:	1d1a      	adds	r2, r3, #4
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	9203      	str	r2, [sp, #12]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	bfb8      	it	lt
 80033c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80033cc:	9305      	str	r3, [sp, #20]
 80033ce:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003498 <_vfiprintf_r+0x224>
 80033d2:	2203      	movs	r2, #3
 80033d4:	4650      	mov	r0, sl
 80033d6:	7821      	ldrb	r1, [r4, #0]
 80033d8:	f000 fb7e 	bl	8003ad8 <memchr>
 80033dc:	b138      	cbz	r0, 80033ee <_vfiprintf_r+0x17a>
 80033de:	2240      	movs	r2, #64	; 0x40
 80033e0:	9b04      	ldr	r3, [sp, #16]
 80033e2:	eba0 000a 	sub.w	r0, r0, sl
 80033e6:	4082      	lsls	r2, r0
 80033e8:	4313      	orrs	r3, r2
 80033ea:	3401      	adds	r4, #1
 80033ec:	9304      	str	r3, [sp, #16]
 80033ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033f2:	2206      	movs	r2, #6
 80033f4:	4829      	ldr	r0, [pc, #164]	; (800349c <_vfiprintf_r+0x228>)
 80033f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033fa:	f000 fb6d 	bl	8003ad8 <memchr>
 80033fe:	2800      	cmp	r0, #0
 8003400:	d03f      	beq.n	8003482 <_vfiprintf_r+0x20e>
 8003402:	4b27      	ldr	r3, [pc, #156]	; (80034a0 <_vfiprintf_r+0x22c>)
 8003404:	bb1b      	cbnz	r3, 800344e <_vfiprintf_r+0x1da>
 8003406:	9b03      	ldr	r3, [sp, #12]
 8003408:	3307      	adds	r3, #7
 800340a:	f023 0307 	bic.w	r3, r3, #7
 800340e:	3308      	adds	r3, #8
 8003410:	9303      	str	r3, [sp, #12]
 8003412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003414:	443b      	add	r3, r7
 8003416:	9309      	str	r3, [sp, #36]	; 0x24
 8003418:	e768      	b.n	80032ec <_vfiprintf_r+0x78>
 800341a:	460c      	mov	r4, r1
 800341c:	2001      	movs	r0, #1
 800341e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003422:	e7a6      	b.n	8003372 <_vfiprintf_r+0xfe>
 8003424:	2300      	movs	r3, #0
 8003426:	f04f 0c0a 	mov.w	ip, #10
 800342a:	4619      	mov	r1, r3
 800342c:	3401      	adds	r4, #1
 800342e:	9305      	str	r3, [sp, #20]
 8003430:	4620      	mov	r0, r4
 8003432:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003436:	3a30      	subs	r2, #48	; 0x30
 8003438:	2a09      	cmp	r2, #9
 800343a:	d903      	bls.n	8003444 <_vfiprintf_r+0x1d0>
 800343c:	2b00      	cmp	r3, #0
 800343e:	d0c6      	beq.n	80033ce <_vfiprintf_r+0x15a>
 8003440:	9105      	str	r1, [sp, #20]
 8003442:	e7c4      	b.n	80033ce <_vfiprintf_r+0x15a>
 8003444:	4604      	mov	r4, r0
 8003446:	2301      	movs	r3, #1
 8003448:	fb0c 2101 	mla	r1, ip, r1, r2
 800344c:	e7f0      	b.n	8003430 <_vfiprintf_r+0x1bc>
 800344e:	ab03      	add	r3, sp, #12
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	462a      	mov	r2, r5
 8003454:	4630      	mov	r0, r6
 8003456:	4b13      	ldr	r3, [pc, #76]	; (80034a4 <_vfiprintf_r+0x230>)
 8003458:	a904      	add	r1, sp, #16
 800345a:	f3af 8000 	nop.w
 800345e:	4607      	mov	r7, r0
 8003460:	1c78      	adds	r0, r7, #1
 8003462:	d1d6      	bne.n	8003412 <_vfiprintf_r+0x19e>
 8003464:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003466:	07d9      	lsls	r1, r3, #31
 8003468:	d405      	bmi.n	8003476 <_vfiprintf_r+0x202>
 800346a:	89ab      	ldrh	r3, [r5, #12]
 800346c:	059a      	lsls	r2, r3, #22
 800346e:	d402      	bmi.n	8003476 <_vfiprintf_r+0x202>
 8003470:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003472:	f7ff fde1 	bl	8003038 <__retarget_lock_release_recursive>
 8003476:	89ab      	ldrh	r3, [r5, #12]
 8003478:	065b      	lsls	r3, r3, #25
 800347a:	f53f af1d 	bmi.w	80032b8 <_vfiprintf_r+0x44>
 800347e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003480:	e71c      	b.n	80032bc <_vfiprintf_r+0x48>
 8003482:	ab03      	add	r3, sp, #12
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	462a      	mov	r2, r5
 8003488:	4630      	mov	r0, r6
 800348a:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <_vfiprintf_r+0x230>)
 800348c:	a904      	add	r1, sp, #16
 800348e:	f000 f87d 	bl	800358c <_printf_i>
 8003492:	e7e4      	b.n	800345e <_vfiprintf_r+0x1ea>
 8003494:	08003cfa 	.word	0x08003cfa
 8003498:	08003d00 	.word	0x08003d00
 800349c:	08003d04 	.word	0x08003d04
 80034a0:	00000000 	.word	0x00000000
 80034a4:	0800324f 	.word	0x0800324f

080034a8 <_printf_common>:
 80034a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034ac:	4616      	mov	r6, r2
 80034ae:	4699      	mov	r9, r3
 80034b0:	688a      	ldr	r2, [r1, #8]
 80034b2:	690b      	ldr	r3, [r1, #16]
 80034b4:	4607      	mov	r7, r0
 80034b6:	4293      	cmp	r3, r2
 80034b8:	bfb8      	it	lt
 80034ba:	4613      	movlt	r3, r2
 80034bc:	6033      	str	r3, [r6, #0]
 80034be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80034c2:	460c      	mov	r4, r1
 80034c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80034c8:	b10a      	cbz	r2, 80034ce <_printf_common+0x26>
 80034ca:	3301      	adds	r3, #1
 80034cc:	6033      	str	r3, [r6, #0]
 80034ce:	6823      	ldr	r3, [r4, #0]
 80034d0:	0699      	lsls	r1, r3, #26
 80034d2:	bf42      	ittt	mi
 80034d4:	6833      	ldrmi	r3, [r6, #0]
 80034d6:	3302      	addmi	r3, #2
 80034d8:	6033      	strmi	r3, [r6, #0]
 80034da:	6825      	ldr	r5, [r4, #0]
 80034dc:	f015 0506 	ands.w	r5, r5, #6
 80034e0:	d106      	bne.n	80034f0 <_printf_common+0x48>
 80034e2:	f104 0a19 	add.w	sl, r4, #25
 80034e6:	68e3      	ldr	r3, [r4, #12]
 80034e8:	6832      	ldr	r2, [r6, #0]
 80034ea:	1a9b      	subs	r3, r3, r2
 80034ec:	42ab      	cmp	r3, r5
 80034ee:	dc2b      	bgt.n	8003548 <_printf_common+0xa0>
 80034f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80034f4:	1e13      	subs	r3, r2, #0
 80034f6:	6822      	ldr	r2, [r4, #0]
 80034f8:	bf18      	it	ne
 80034fa:	2301      	movne	r3, #1
 80034fc:	0692      	lsls	r2, r2, #26
 80034fe:	d430      	bmi.n	8003562 <_printf_common+0xba>
 8003500:	4649      	mov	r1, r9
 8003502:	4638      	mov	r0, r7
 8003504:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003508:	47c0      	blx	r8
 800350a:	3001      	adds	r0, #1
 800350c:	d023      	beq.n	8003556 <_printf_common+0xae>
 800350e:	6823      	ldr	r3, [r4, #0]
 8003510:	6922      	ldr	r2, [r4, #16]
 8003512:	f003 0306 	and.w	r3, r3, #6
 8003516:	2b04      	cmp	r3, #4
 8003518:	bf14      	ite	ne
 800351a:	2500      	movne	r5, #0
 800351c:	6833      	ldreq	r3, [r6, #0]
 800351e:	f04f 0600 	mov.w	r6, #0
 8003522:	bf08      	it	eq
 8003524:	68e5      	ldreq	r5, [r4, #12]
 8003526:	f104 041a 	add.w	r4, r4, #26
 800352a:	bf08      	it	eq
 800352c:	1aed      	subeq	r5, r5, r3
 800352e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003532:	bf08      	it	eq
 8003534:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003538:	4293      	cmp	r3, r2
 800353a:	bfc4      	itt	gt
 800353c:	1a9b      	subgt	r3, r3, r2
 800353e:	18ed      	addgt	r5, r5, r3
 8003540:	42b5      	cmp	r5, r6
 8003542:	d11a      	bne.n	800357a <_printf_common+0xd2>
 8003544:	2000      	movs	r0, #0
 8003546:	e008      	b.n	800355a <_printf_common+0xb2>
 8003548:	2301      	movs	r3, #1
 800354a:	4652      	mov	r2, sl
 800354c:	4649      	mov	r1, r9
 800354e:	4638      	mov	r0, r7
 8003550:	47c0      	blx	r8
 8003552:	3001      	adds	r0, #1
 8003554:	d103      	bne.n	800355e <_printf_common+0xb6>
 8003556:	f04f 30ff 	mov.w	r0, #4294967295
 800355a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800355e:	3501      	adds	r5, #1
 8003560:	e7c1      	b.n	80034e6 <_printf_common+0x3e>
 8003562:	2030      	movs	r0, #48	; 0x30
 8003564:	18e1      	adds	r1, r4, r3
 8003566:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800356a:	1c5a      	adds	r2, r3, #1
 800356c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003570:	4422      	add	r2, r4
 8003572:	3302      	adds	r3, #2
 8003574:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003578:	e7c2      	b.n	8003500 <_printf_common+0x58>
 800357a:	2301      	movs	r3, #1
 800357c:	4622      	mov	r2, r4
 800357e:	4649      	mov	r1, r9
 8003580:	4638      	mov	r0, r7
 8003582:	47c0      	blx	r8
 8003584:	3001      	adds	r0, #1
 8003586:	d0e6      	beq.n	8003556 <_printf_common+0xae>
 8003588:	3601      	adds	r6, #1
 800358a:	e7d9      	b.n	8003540 <_printf_common+0x98>

0800358c <_printf_i>:
 800358c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003590:	7e0f      	ldrb	r7, [r1, #24]
 8003592:	4691      	mov	r9, r2
 8003594:	2f78      	cmp	r7, #120	; 0x78
 8003596:	4680      	mov	r8, r0
 8003598:	460c      	mov	r4, r1
 800359a:	469a      	mov	sl, r3
 800359c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800359e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80035a2:	d807      	bhi.n	80035b4 <_printf_i+0x28>
 80035a4:	2f62      	cmp	r7, #98	; 0x62
 80035a6:	d80a      	bhi.n	80035be <_printf_i+0x32>
 80035a8:	2f00      	cmp	r7, #0
 80035aa:	f000 80d5 	beq.w	8003758 <_printf_i+0x1cc>
 80035ae:	2f58      	cmp	r7, #88	; 0x58
 80035b0:	f000 80c1 	beq.w	8003736 <_printf_i+0x1aa>
 80035b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80035bc:	e03a      	b.n	8003634 <_printf_i+0xa8>
 80035be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80035c2:	2b15      	cmp	r3, #21
 80035c4:	d8f6      	bhi.n	80035b4 <_printf_i+0x28>
 80035c6:	a101      	add	r1, pc, #4	; (adr r1, 80035cc <_printf_i+0x40>)
 80035c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80035cc:	08003625 	.word	0x08003625
 80035d0:	08003639 	.word	0x08003639
 80035d4:	080035b5 	.word	0x080035b5
 80035d8:	080035b5 	.word	0x080035b5
 80035dc:	080035b5 	.word	0x080035b5
 80035e0:	080035b5 	.word	0x080035b5
 80035e4:	08003639 	.word	0x08003639
 80035e8:	080035b5 	.word	0x080035b5
 80035ec:	080035b5 	.word	0x080035b5
 80035f0:	080035b5 	.word	0x080035b5
 80035f4:	080035b5 	.word	0x080035b5
 80035f8:	0800373f 	.word	0x0800373f
 80035fc:	08003665 	.word	0x08003665
 8003600:	080036f9 	.word	0x080036f9
 8003604:	080035b5 	.word	0x080035b5
 8003608:	080035b5 	.word	0x080035b5
 800360c:	08003761 	.word	0x08003761
 8003610:	080035b5 	.word	0x080035b5
 8003614:	08003665 	.word	0x08003665
 8003618:	080035b5 	.word	0x080035b5
 800361c:	080035b5 	.word	0x080035b5
 8003620:	08003701 	.word	0x08003701
 8003624:	682b      	ldr	r3, [r5, #0]
 8003626:	1d1a      	adds	r2, r3, #4
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	602a      	str	r2, [r5, #0]
 800362c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003630:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003634:	2301      	movs	r3, #1
 8003636:	e0a0      	b.n	800377a <_printf_i+0x1ee>
 8003638:	6820      	ldr	r0, [r4, #0]
 800363a:	682b      	ldr	r3, [r5, #0]
 800363c:	0607      	lsls	r7, r0, #24
 800363e:	f103 0104 	add.w	r1, r3, #4
 8003642:	6029      	str	r1, [r5, #0]
 8003644:	d501      	bpl.n	800364a <_printf_i+0xbe>
 8003646:	681e      	ldr	r6, [r3, #0]
 8003648:	e003      	b.n	8003652 <_printf_i+0xc6>
 800364a:	0646      	lsls	r6, r0, #25
 800364c:	d5fb      	bpl.n	8003646 <_printf_i+0xba>
 800364e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003652:	2e00      	cmp	r6, #0
 8003654:	da03      	bge.n	800365e <_printf_i+0xd2>
 8003656:	232d      	movs	r3, #45	; 0x2d
 8003658:	4276      	negs	r6, r6
 800365a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800365e:	230a      	movs	r3, #10
 8003660:	4859      	ldr	r0, [pc, #356]	; (80037c8 <_printf_i+0x23c>)
 8003662:	e012      	b.n	800368a <_printf_i+0xfe>
 8003664:	682b      	ldr	r3, [r5, #0]
 8003666:	6820      	ldr	r0, [r4, #0]
 8003668:	1d19      	adds	r1, r3, #4
 800366a:	6029      	str	r1, [r5, #0]
 800366c:	0605      	lsls	r5, r0, #24
 800366e:	d501      	bpl.n	8003674 <_printf_i+0xe8>
 8003670:	681e      	ldr	r6, [r3, #0]
 8003672:	e002      	b.n	800367a <_printf_i+0xee>
 8003674:	0641      	lsls	r1, r0, #25
 8003676:	d5fb      	bpl.n	8003670 <_printf_i+0xe4>
 8003678:	881e      	ldrh	r6, [r3, #0]
 800367a:	2f6f      	cmp	r7, #111	; 0x6f
 800367c:	bf0c      	ite	eq
 800367e:	2308      	moveq	r3, #8
 8003680:	230a      	movne	r3, #10
 8003682:	4851      	ldr	r0, [pc, #324]	; (80037c8 <_printf_i+0x23c>)
 8003684:	2100      	movs	r1, #0
 8003686:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800368a:	6865      	ldr	r5, [r4, #4]
 800368c:	2d00      	cmp	r5, #0
 800368e:	bfa8      	it	ge
 8003690:	6821      	ldrge	r1, [r4, #0]
 8003692:	60a5      	str	r5, [r4, #8]
 8003694:	bfa4      	itt	ge
 8003696:	f021 0104 	bicge.w	r1, r1, #4
 800369a:	6021      	strge	r1, [r4, #0]
 800369c:	b90e      	cbnz	r6, 80036a2 <_printf_i+0x116>
 800369e:	2d00      	cmp	r5, #0
 80036a0:	d04b      	beq.n	800373a <_printf_i+0x1ae>
 80036a2:	4615      	mov	r5, r2
 80036a4:	fbb6 f1f3 	udiv	r1, r6, r3
 80036a8:	fb03 6711 	mls	r7, r3, r1, r6
 80036ac:	5dc7      	ldrb	r7, [r0, r7]
 80036ae:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80036b2:	4637      	mov	r7, r6
 80036b4:	42bb      	cmp	r3, r7
 80036b6:	460e      	mov	r6, r1
 80036b8:	d9f4      	bls.n	80036a4 <_printf_i+0x118>
 80036ba:	2b08      	cmp	r3, #8
 80036bc:	d10b      	bne.n	80036d6 <_printf_i+0x14a>
 80036be:	6823      	ldr	r3, [r4, #0]
 80036c0:	07de      	lsls	r6, r3, #31
 80036c2:	d508      	bpl.n	80036d6 <_printf_i+0x14a>
 80036c4:	6923      	ldr	r3, [r4, #16]
 80036c6:	6861      	ldr	r1, [r4, #4]
 80036c8:	4299      	cmp	r1, r3
 80036ca:	bfde      	ittt	le
 80036cc:	2330      	movle	r3, #48	; 0x30
 80036ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80036d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80036d6:	1b52      	subs	r2, r2, r5
 80036d8:	6122      	str	r2, [r4, #16]
 80036da:	464b      	mov	r3, r9
 80036dc:	4621      	mov	r1, r4
 80036de:	4640      	mov	r0, r8
 80036e0:	f8cd a000 	str.w	sl, [sp]
 80036e4:	aa03      	add	r2, sp, #12
 80036e6:	f7ff fedf 	bl	80034a8 <_printf_common>
 80036ea:	3001      	adds	r0, #1
 80036ec:	d14a      	bne.n	8003784 <_printf_i+0x1f8>
 80036ee:	f04f 30ff 	mov.w	r0, #4294967295
 80036f2:	b004      	add	sp, #16
 80036f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036f8:	6823      	ldr	r3, [r4, #0]
 80036fa:	f043 0320 	orr.w	r3, r3, #32
 80036fe:	6023      	str	r3, [r4, #0]
 8003700:	2778      	movs	r7, #120	; 0x78
 8003702:	4832      	ldr	r0, [pc, #200]	; (80037cc <_printf_i+0x240>)
 8003704:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003708:	6823      	ldr	r3, [r4, #0]
 800370a:	6829      	ldr	r1, [r5, #0]
 800370c:	061f      	lsls	r7, r3, #24
 800370e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003712:	d402      	bmi.n	800371a <_printf_i+0x18e>
 8003714:	065f      	lsls	r7, r3, #25
 8003716:	bf48      	it	mi
 8003718:	b2b6      	uxthmi	r6, r6
 800371a:	07df      	lsls	r7, r3, #31
 800371c:	bf48      	it	mi
 800371e:	f043 0320 	orrmi.w	r3, r3, #32
 8003722:	6029      	str	r1, [r5, #0]
 8003724:	bf48      	it	mi
 8003726:	6023      	strmi	r3, [r4, #0]
 8003728:	b91e      	cbnz	r6, 8003732 <_printf_i+0x1a6>
 800372a:	6823      	ldr	r3, [r4, #0]
 800372c:	f023 0320 	bic.w	r3, r3, #32
 8003730:	6023      	str	r3, [r4, #0]
 8003732:	2310      	movs	r3, #16
 8003734:	e7a6      	b.n	8003684 <_printf_i+0xf8>
 8003736:	4824      	ldr	r0, [pc, #144]	; (80037c8 <_printf_i+0x23c>)
 8003738:	e7e4      	b.n	8003704 <_printf_i+0x178>
 800373a:	4615      	mov	r5, r2
 800373c:	e7bd      	b.n	80036ba <_printf_i+0x12e>
 800373e:	682b      	ldr	r3, [r5, #0]
 8003740:	6826      	ldr	r6, [r4, #0]
 8003742:	1d18      	adds	r0, r3, #4
 8003744:	6961      	ldr	r1, [r4, #20]
 8003746:	6028      	str	r0, [r5, #0]
 8003748:	0635      	lsls	r5, r6, #24
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	d501      	bpl.n	8003752 <_printf_i+0x1c6>
 800374e:	6019      	str	r1, [r3, #0]
 8003750:	e002      	b.n	8003758 <_printf_i+0x1cc>
 8003752:	0670      	lsls	r0, r6, #25
 8003754:	d5fb      	bpl.n	800374e <_printf_i+0x1c2>
 8003756:	8019      	strh	r1, [r3, #0]
 8003758:	2300      	movs	r3, #0
 800375a:	4615      	mov	r5, r2
 800375c:	6123      	str	r3, [r4, #16]
 800375e:	e7bc      	b.n	80036da <_printf_i+0x14e>
 8003760:	682b      	ldr	r3, [r5, #0]
 8003762:	2100      	movs	r1, #0
 8003764:	1d1a      	adds	r2, r3, #4
 8003766:	602a      	str	r2, [r5, #0]
 8003768:	681d      	ldr	r5, [r3, #0]
 800376a:	6862      	ldr	r2, [r4, #4]
 800376c:	4628      	mov	r0, r5
 800376e:	f000 f9b3 	bl	8003ad8 <memchr>
 8003772:	b108      	cbz	r0, 8003778 <_printf_i+0x1ec>
 8003774:	1b40      	subs	r0, r0, r5
 8003776:	6060      	str	r0, [r4, #4]
 8003778:	6863      	ldr	r3, [r4, #4]
 800377a:	6123      	str	r3, [r4, #16]
 800377c:	2300      	movs	r3, #0
 800377e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003782:	e7aa      	b.n	80036da <_printf_i+0x14e>
 8003784:	462a      	mov	r2, r5
 8003786:	4649      	mov	r1, r9
 8003788:	4640      	mov	r0, r8
 800378a:	6923      	ldr	r3, [r4, #16]
 800378c:	47d0      	blx	sl
 800378e:	3001      	adds	r0, #1
 8003790:	d0ad      	beq.n	80036ee <_printf_i+0x162>
 8003792:	6823      	ldr	r3, [r4, #0]
 8003794:	079b      	lsls	r3, r3, #30
 8003796:	d413      	bmi.n	80037c0 <_printf_i+0x234>
 8003798:	68e0      	ldr	r0, [r4, #12]
 800379a:	9b03      	ldr	r3, [sp, #12]
 800379c:	4298      	cmp	r0, r3
 800379e:	bfb8      	it	lt
 80037a0:	4618      	movlt	r0, r3
 80037a2:	e7a6      	b.n	80036f2 <_printf_i+0x166>
 80037a4:	2301      	movs	r3, #1
 80037a6:	4632      	mov	r2, r6
 80037a8:	4649      	mov	r1, r9
 80037aa:	4640      	mov	r0, r8
 80037ac:	47d0      	blx	sl
 80037ae:	3001      	adds	r0, #1
 80037b0:	d09d      	beq.n	80036ee <_printf_i+0x162>
 80037b2:	3501      	adds	r5, #1
 80037b4:	68e3      	ldr	r3, [r4, #12]
 80037b6:	9903      	ldr	r1, [sp, #12]
 80037b8:	1a5b      	subs	r3, r3, r1
 80037ba:	42ab      	cmp	r3, r5
 80037bc:	dcf2      	bgt.n	80037a4 <_printf_i+0x218>
 80037be:	e7eb      	b.n	8003798 <_printf_i+0x20c>
 80037c0:	2500      	movs	r5, #0
 80037c2:	f104 0619 	add.w	r6, r4, #25
 80037c6:	e7f5      	b.n	80037b4 <_printf_i+0x228>
 80037c8:	08003d0b 	.word	0x08003d0b
 80037cc:	08003d1c 	.word	0x08003d1c

080037d0 <__sflush_r>:
 80037d0:	898a      	ldrh	r2, [r1, #12]
 80037d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d4:	4605      	mov	r5, r0
 80037d6:	0710      	lsls	r0, r2, #28
 80037d8:	460c      	mov	r4, r1
 80037da:	d457      	bmi.n	800388c <__sflush_r+0xbc>
 80037dc:	684b      	ldr	r3, [r1, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	dc04      	bgt.n	80037ec <__sflush_r+0x1c>
 80037e2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	dc01      	bgt.n	80037ec <__sflush_r+0x1c>
 80037e8:	2000      	movs	r0, #0
 80037ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037ee:	2e00      	cmp	r6, #0
 80037f0:	d0fa      	beq.n	80037e8 <__sflush_r+0x18>
 80037f2:	2300      	movs	r3, #0
 80037f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80037f8:	682f      	ldr	r7, [r5, #0]
 80037fa:	6a21      	ldr	r1, [r4, #32]
 80037fc:	602b      	str	r3, [r5, #0]
 80037fe:	d032      	beq.n	8003866 <__sflush_r+0x96>
 8003800:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003802:	89a3      	ldrh	r3, [r4, #12]
 8003804:	075a      	lsls	r2, r3, #29
 8003806:	d505      	bpl.n	8003814 <__sflush_r+0x44>
 8003808:	6863      	ldr	r3, [r4, #4]
 800380a:	1ac0      	subs	r0, r0, r3
 800380c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800380e:	b10b      	cbz	r3, 8003814 <__sflush_r+0x44>
 8003810:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003812:	1ac0      	subs	r0, r0, r3
 8003814:	2300      	movs	r3, #0
 8003816:	4602      	mov	r2, r0
 8003818:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800381a:	4628      	mov	r0, r5
 800381c:	6a21      	ldr	r1, [r4, #32]
 800381e:	47b0      	blx	r6
 8003820:	1c43      	adds	r3, r0, #1
 8003822:	89a3      	ldrh	r3, [r4, #12]
 8003824:	d106      	bne.n	8003834 <__sflush_r+0x64>
 8003826:	6829      	ldr	r1, [r5, #0]
 8003828:	291d      	cmp	r1, #29
 800382a:	d82b      	bhi.n	8003884 <__sflush_r+0xb4>
 800382c:	4a28      	ldr	r2, [pc, #160]	; (80038d0 <__sflush_r+0x100>)
 800382e:	410a      	asrs	r2, r1
 8003830:	07d6      	lsls	r6, r2, #31
 8003832:	d427      	bmi.n	8003884 <__sflush_r+0xb4>
 8003834:	2200      	movs	r2, #0
 8003836:	6062      	str	r2, [r4, #4]
 8003838:	6922      	ldr	r2, [r4, #16]
 800383a:	04d9      	lsls	r1, r3, #19
 800383c:	6022      	str	r2, [r4, #0]
 800383e:	d504      	bpl.n	800384a <__sflush_r+0x7a>
 8003840:	1c42      	adds	r2, r0, #1
 8003842:	d101      	bne.n	8003848 <__sflush_r+0x78>
 8003844:	682b      	ldr	r3, [r5, #0]
 8003846:	b903      	cbnz	r3, 800384a <__sflush_r+0x7a>
 8003848:	6560      	str	r0, [r4, #84]	; 0x54
 800384a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800384c:	602f      	str	r7, [r5, #0]
 800384e:	2900      	cmp	r1, #0
 8003850:	d0ca      	beq.n	80037e8 <__sflush_r+0x18>
 8003852:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003856:	4299      	cmp	r1, r3
 8003858:	d002      	beq.n	8003860 <__sflush_r+0x90>
 800385a:	4628      	mov	r0, r5
 800385c:	f7ff fbee 	bl	800303c <_free_r>
 8003860:	2000      	movs	r0, #0
 8003862:	6360      	str	r0, [r4, #52]	; 0x34
 8003864:	e7c1      	b.n	80037ea <__sflush_r+0x1a>
 8003866:	2301      	movs	r3, #1
 8003868:	4628      	mov	r0, r5
 800386a:	47b0      	blx	r6
 800386c:	1c41      	adds	r1, r0, #1
 800386e:	d1c8      	bne.n	8003802 <__sflush_r+0x32>
 8003870:	682b      	ldr	r3, [r5, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0c5      	beq.n	8003802 <__sflush_r+0x32>
 8003876:	2b1d      	cmp	r3, #29
 8003878:	d001      	beq.n	800387e <__sflush_r+0xae>
 800387a:	2b16      	cmp	r3, #22
 800387c:	d101      	bne.n	8003882 <__sflush_r+0xb2>
 800387e:	602f      	str	r7, [r5, #0]
 8003880:	e7b2      	b.n	80037e8 <__sflush_r+0x18>
 8003882:	89a3      	ldrh	r3, [r4, #12]
 8003884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003888:	81a3      	strh	r3, [r4, #12]
 800388a:	e7ae      	b.n	80037ea <__sflush_r+0x1a>
 800388c:	690f      	ldr	r7, [r1, #16]
 800388e:	2f00      	cmp	r7, #0
 8003890:	d0aa      	beq.n	80037e8 <__sflush_r+0x18>
 8003892:	0793      	lsls	r3, r2, #30
 8003894:	bf18      	it	ne
 8003896:	2300      	movne	r3, #0
 8003898:	680e      	ldr	r6, [r1, #0]
 800389a:	bf08      	it	eq
 800389c:	694b      	ldreq	r3, [r1, #20]
 800389e:	1bf6      	subs	r6, r6, r7
 80038a0:	600f      	str	r7, [r1, #0]
 80038a2:	608b      	str	r3, [r1, #8]
 80038a4:	2e00      	cmp	r6, #0
 80038a6:	dd9f      	ble.n	80037e8 <__sflush_r+0x18>
 80038a8:	4633      	mov	r3, r6
 80038aa:	463a      	mov	r2, r7
 80038ac:	4628      	mov	r0, r5
 80038ae:	6a21      	ldr	r1, [r4, #32]
 80038b0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80038b4:	47e0      	blx	ip
 80038b6:	2800      	cmp	r0, #0
 80038b8:	dc06      	bgt.n	80038c8 <__sflush_r+0xf8>
 80038ba:	89a3      	ldrh	r3, [r4, #12]
 80038bc:	f04f 30ff 	mov.w	r0, #4294967295
 80038c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038c4:	81a3      	strh	r3, [r4, #12]
 80038c6:	e790      	b.n	80037ea <__sflush_r+0x1a>
 80038c8:	4407      	add	r7, r0
 80038ca:	1a36      	subs	r6, r6, r0
 80038cc:	e7ea      	b.n	80038a4 <__sflush_r+0xd4>
 80038ce:	bf00      	nop
 80038d0:	dfbffffe 	.word	0xdfbffffe

080038d4 <_fflush_r>:
 80038d4:	b538      	push	{r3, r4, r5, lr}
 80038d6:	690b      	ldr	r3, [r1, #16]
 80038d8:	4605      	mov	r5, r0
 80038da:	460c      	mov	r4, r1
 80038dc:	b913      	cbnz	r3, 80038e4 <_fflush_r+0x10>
 80038de:	2500      	movs	r5, #0
 80038e0:	4628      	mov	r0, r5
 80038e2:	bd38      	pop	{r3, r4, r5, pc}
 80038e4:	b118      	cbz	r0, 80038ee <_fflush_r+0x1a>
 80038e6:	6a03      	ldr	r3, [r0, #32]
 80038e8:	b90b      	cbnz	r3, 80038ee <_fflush_r+0x1a>
 80038ea:	f7ff fa97 	bl	8002e1c <__sinit>
 80038ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0f3      	beq.n	80038de <_fflush_r+0xa>
 80038f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80038f8:	07d0      	lsls	r0, r2, #31
 80038fa:	d404      	bmi.n	8003906 <_fflush_r+0x32>
 80038fc:	0599      	lsls	r1, r3, #22
 80038fe:	d402      	bmi.n	8003906 <_fflush_r+0x32>
 8003900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003902:	f7ff fb98 	bl	8003036 <__retarget_lock_acquire_recursive>
 8003906:	4628      	mov	r0, r5
 8003908:	4621      	mov	r1, r4
 800390a:	f7ff ff61 	bl	80037d0 <__sflush_r>
 800390e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003910:	4605      	mov	r5, r0
 8003912:	07da      	lsls	r2, r3, #31
 8003914:	d4e4      	bmi.n	80038e0 <_fflush_r+0xc>
 8003916:	89a3      	ldrh	r3, [r4, #12]
 8003918:	059b      	lsls	r3, r3, #22
 800391a:	d4e1      	bmi.n	80038e0 <_fflush_r+0xc>
 800391c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800391e:	f7ff fb8b 	bl	8003038 <__retarget_lock_release_recursive>
 8003922:	e7dd      	b.n	80038e0 <_fflush_r+0xc>

08003924 <_putc_r>:
 8003924:	b570      	push	{r4, r5, r6, lr}
 8003926:	460d      	mov	r5, r1
 8003928:	4614      	mov	r4, r2
 800392a:	4606      	mov	r6, r0
 800392c:	b118      	cbz	r0, 8003936 <_putc_r+0x12>
 800392e:	6a03      	ldr	r3, [r0, #32]
 8003930:	b90b      	cbnz	r3, 8003936 <_putc_r+0x12>
 8003932:	f7ff fa73 	bl	8002e1c <__sinit>
 8003936:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003938:	07d8      	lsls	r0, r3, #31
 800393a:	d405      	bmi.n	8003948 <_putc_r+0x24>
 800393c:	89a3      	ldrh	r3, [r4, #12]
 800393e:	0599      	lsls	r1, r3, #22
 8003940:	d402      	bmi.n	8003948 <_putc_r+0x24>
 8003942:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003944:	f7ff fb77 	bl	8003036 <__retarget_lock_acquire_recursive>
 8003948:	68a3      	ldr	r3, [r4, #8]
 800394a:	3b01      	subs	r3, #1
 800394c:	2b00      	cmp	r3, #0
 800394e:	60a3      	str	r3, [r4, #8]
 8003950:	da05      	bge.n	800395e <_putc_r+0x3a>
 8003952:	69a2      	ldr	r2, [r4, #24]
 8003954:	4293      	cmp	r3, r2
 8003956:	db12      	blt.n	800397e <_putc_r+0x5a>
 8003958:	b2eb      	uxtb	r3, r5
 800395a:	2b0a      	cmp	r3, #10
 800395c:	d00f      	beq.n	800397e <_putc_r+0x5a>
 800395e:	6823      	ldr	r3, [r4, #0]
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	6022      	str	r2, [r4, #0]
 8003964:	701d      	strb	r5, [r3, #0]
 8003966:	b2ed      	uxtb	r5, r5
 8003968:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800396a:	07da      	lsls	r2, r3, #31
 800396c:	d405      	bmi.n	800397a <_putc_r+0x56>
 800396e:	89a3      	ldrh	r3, [r4, #12]
 8003970:	059b      	lsls	r3, r3, #22
 8003972:	d402      	bmi.n	800397a <_putc_r+0x56>
 8003974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003976:	f7ff fb5f 	bl	8003038 <__retarget_lock_release_recursive>
 800397a:	4628      	mov	r0, r5
 800397c:	bd70      	pop	{r4, r5, r6, pc}
 800397e:	4629      	mov	r1, r5
 8003980:	4622      	mov	r2, r4
 8003982:	4630      	mov	r0, r6
 8003984:	f000 f802 	bl	800398c <__swbuf_r>
 8003988:	4605      	mov	r5, r0
 800398a:	e7ed      	b.n	8003968 <_putc_r+0x44>

0800398c <__swbuf_r>:
 800398c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398e:	460e      	mov	r6, r1
 8003990:	4614      	mov	r4, r2
 8003992:	4605      	mov	r5, r0
 8003994:	b118      	cbz	r0, 800399e <__swbuf_r+0x12>
 8003996:	6a03      	ldr	r3, [r0, #32]
 8003998:	b90b      	cbnz	r3, 800399e <__swbuf_r+0x12>
 800399a:	f7ff fa3f 	bl	8002e1c <__sinit>
 800399e:	69a3      	ldr	r3, [r4, #24]
 80039a0:	60a3      	str	r3, [r4, #8]
 80039a2:	89a3      	ldrh	r3, [r4, #12]
 80039a4:	071a      	lsls	r2, r3, #28
 80039a6:	d525      	bpl.n	80039f4 <__swbuf_r+0x68>
 80039a8:	6923      	ldr	r3, [r4, #16]
 80039aa:	b31b      	cbz	r3, 80039f4 <__swbuf_r+0x68>
 80039ac:	6823      	ldr	r3, [r4, #0]
 80039ae:	6922      	ldr	r2, [r4, #16]
 80039b0:	b2f6      	uxtb	r6, r6
 80039b2:	1a98      	subs	r0, r3, r2
 80039b4:	6963      	ldr	r3, [r4, #20]
 80039b6:	4637      	mov	r7, r6
 80039b8:	4283      	cmp	r3, r0
 80039ba:	dc04      	bgt.n	80039c6 <__swbuf_r+0x3a>
 80039bc:	4621      	mov	r1, r4
 80039be:	4628      	mov	r0, r5
 80039c0:	f7ff ff88 	bl	80038d4 <_fflush_r>
 80039c4:	b9e0      	cbnz	r0, 8003a00 <__swbuf_r+0x74>
 80039c6:	68a3      	ldr	r3, [r4, #8]
 80039c8:	3b01      	subs	r3, #1
 80039ca:	60a3      	str	r3, [r4, #8]
 80039cc:	6823      	ldr	r3, [r4, #0]
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	6022      	str	r2, [r4, #0]
 80039d2:	701e      	strb	r6, [r3, #0]
 80039d4:	6962      	ldr	r2, [r4, #20]
 80039d6:	1c43      	adds	r3, r0, #1
 80039d8:	429a      	cmp	r2, r3
 80039da:	d004      	beq.n	80039e6 <__swbuf_r+0x5a>
 80039dc:	89a3      	ldrh	r3, [r4, #12]
 80039de:	07db      	lsls	r3, r3, #31
 80039e0:	d506      	bpl.n	80039f0 <__swbuf_r+0x64>
 80039e2:	2e0a      	cmp	r6, #10
 80039e4:	d104      	bne.n	80039f0 <__swbuf_r+0x64>
 80039e6:	4621      	mov	r1, r4
 80039e8:	4628      	mov	r0, r5
 80039ea:	f7ff ff73 	bl	80038d4 <_fflush_r>
 80039ee:	b938      	cbnz	r0, 8003a00 <__swbuf_r+0x74>
 80039f0:	4638      	mov	r0, r7
 80039f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039f4:	4621      	mov	r1, r4
 80039f6:	4628      	mov	r0, r5
 80039f8:	f000 f806 	bl	8003a08 <__swsetup_r>
 80039fc:	2800      	cmp	r0, #0
 80039fe:	d0d5      	beq.n	80039ac <__swbuf_r+0x20>
 8003a00:	f04f 37ff 	mov.w	r7, #4294967295
 8003a04:	e7f4      	b.n	80039f0 <__swbuf_r+0x64>
	...

08003a08 <__swsetup_r>:
 8003a08:	b538      	push	{r3, r4, r5, lr}
 8003a0a:	4b2a      	ldr	r3, [pc, #168]	; (8003ab4 <__swsetup_r+0xac>)
 8003a0c:	4605      	mov	r5, r0
 8003a0e:	6818      	ldr	r0, [r3, #0]
 8003a10:	460c      	mov	r4, r1
 8003a12:	b118      	cbz	r0, 8003a1c <__swsetup_r+0x14>
 8003a14:	6a03      	ldr	r3, [r0, #32]
 8003a16:	b90b      	cbnz	r3, 8003a1c <__swsetup_r+0x14>
 8003a18:	f7ff fa00 	bl	8002e1c <__sinit>
 8003a1c:	89a3      	ldrh	r3, [r4, #12]
 8003a1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003a22:	0718      	lsls	r0, r3, #28
 8003a24:	d422      	bmi.n	8003a6c <__swsetup_r+0x64>
 8003a26:	06d9      	lsls	r1, r3, #27
 8003a28:	d407      	bmi.n	8003a3a <__swsetup_r+0x32>
 8003a2a:	2309      	movs	r3, #9
 8003a2c:	602b      	str	r3, [r5, #0]
 8003a2e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003a32:	f04f 30ff 	mov.w	r0, #4294967295
 8003a36:	81a3      	strh	r3, [r4, #12]
 8003a38:	e034      	b.n	8003aa4 <__swsetup_r+0x9c>
 8003a3a:	0758      	lsls	r0, r3, #29
 8003a3c:	d512      	bpl.n	8003a64 <__swsetup_r+0x5c>
 8003a3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a40:	b141      	cbz	r1, 8003a54 <__swsetup_r+0x4c>
 8003a42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a46:	4299      	cmp	r1, r3
 8003a48:	d002      	beq.n	8003a50 <__swsetup_r+0x48>
 8003a4a:	4628      	mov	r0, r5
 8003a4c:	f7ff faf6 	bl	800303c <_free_r>
 8003a50:	2300      	movs	r3, #0
 8003a52:	6363      	str	r3, [r4, #52]	; 0x34
 8003a54:	89a3      	ldrh	r3, [r4, #12]
 8003a56:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003a5a:	81a3      	strh	r3, [r4, #12]
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	6063      	str	r3, [r4, #4]
 8003a60:	6923      	ldr	r3, [r4, #16]
 8003a62:	6023      	str	r3, [r4, #0]
 8003a64:	89a3      	ldrh	r3, [r4, #12]
 8003a66:	f043 0308 	orr.w	r3, r3, #8
 8003a6a:	81a3      	strh	r3, [r4, #12]
 8003a6c:	6923      	ldr	r3, [r4, #16]
 8003a6e:	b94b      	cbnz	r3, 8003a84 <__swsetup_r+0x7c>
 8003a70:	89a3      	ldrh	r3, [r4, #12]
 8003a72:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003a76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a7a:	d003      	beq.n	8003a84 <__swsetup_r+0x7c>
 8003a7c:	4621      	mov	r1, r4
 8003a7e:	4628      	mov	r0, r5
 8003a80:	f000 f85d 	bl	8003b3e <__smakebuf_r>
 8003a84:	89a0      	ldrh	r0, [r4, #12]
 8003a86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003a8a:	f010 0301 	ands.w	r3, r0, #1
 8003a8e:	d00a      	beq.n	8003aa6 <__swsetup_r+0x9e>
 8003a90:	2300      	movs	r3, #0
 8003a92:	60a3      	str	r3, [r4, #8]
 8003a94:	6963      	ldr	r3, [r4, #20]
 8003a96:	425b      	negs	r3, r3
 8003a98:	61a3      	str	r3, [r4, #24]
 8003a9a:	6923      	ldr	r3, [r4, #16]
 8003a9c:	b943      	cbnz	r3, 8003ab0 <__swsetup_r+0xa8>
 8003a9e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003aa2:	d1c4      	bne.n	8003a2e <__swsetup_r+0x26>
 8003aa4:	bd38      	pop	{r3, r4, r5, pc}
 8003aa6:	0781      	lsls	r1, r0, #30
 8003aa8:	bf58      	it	pl
 8003aaa:	6963      	ldrpl	r3, [r4, #20]
 8003aac:	60a3      	str	r3, [r4, #8]
 8003aae:	e7f4      	b.n	8003a9a <__swsetup_r+0x92>
 8003ab0:	2000      	movs	r0, #0
 8003ab2:	e7f7      	b.n	8003aa4 <__swsetup_r+0x9c>
 8003ab4:	200000b0 	.word	0x200000b0

08003ab8 <_sbrk_r>:
 8003ab8:	b538      	push	{r3, r4, r5, lr}
 8003aba:	2300      	movs	r3, #0
 8003abc:	4d05      	ldr	r5, [pc, #20]	; (8003ad4 <_sbrk_r+0x1c>)
 8003abe:	4604      	mov	r4, r0
 8003ac0:	4608      	mov	r0, r1
 8003ac2:	602b      	str	r3, [r5, #0]
 8003ac4:	f7fd fc2a 	bl	800131c <_sbrk>
 8003ac8:	1c43      	adds	r3, r0, #1
 8003aca:	d102      	bne.n	8003ad2 <_sbrk_r+0x1a>
 8003acc:	682b      	ldr	r3, [r5, #0]
 8003ace:	b103      	cbz	r3, 8003ad2 <_sbrk_r+0x1a>
 8003ad0:	6023      	str	r3, [r4, #0]
 8003ad2:	bd38      	pop	{r3, r4, r5, pc}
 8003ad4:	20000288 	.word	0x20000288

08003ad8 <memchr>:
 8003ad8:	4603      	mov	r3, r0
 8003ada:	b510      	push	{r4, lr}
 8003adc:	b2c9      	uxtb	r1, r1
 8003ade:	4402      	add	r2, r0
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	d101      	bne.n	8003aea <memchr+0x12>
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	e003      	b.n	8003af2 <memchr+0x1a>
 8003aea:	7804      	ldrb	r4, [r0, #0]
 8003aec:	3301      	adds	r3, #1
 8003aee:	428c      	cmp	r4, r1
 8003af0:	d1f6      	bne.n	8003ae0 <memchr+0x8>
 8003af2:	bd10      	pop	{r4, pc}

08003af4 <__swhatbuf_r>:
 8003af4:	b570      	push	{r4, r5, r6, lr}
 8003af6:	460c      	mov	r4, r1
 8003af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003afc:	4615      	mov	r5, r2
 8003afe:	2900      	cmp	r1, #0
 8003b00:	461e      	mov	r6, r3
 8003b02:	b096      	sub	sp, #88	; 0x58
 8003b04:	da0c      	bge.n	8003b20 <__swhatbuf_r+0x2c>
 8003b06:	89a3      	ldrh	r3, [r4, #12]
 8003b08:	2100      	movs	r1, #0
 8003b0a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003b0e:	bf0c      	ite	eq
 8003b10:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003b14:	2340      	movne	r3, #64	; 0x40
 8003b16:	2000      	movs	r0, #0
 8003b18:	6031      	str	r1, [r6, #0]
 8003b1a:	602b      	str	r3, [r5, #0]
 8003b1c:	b016      	add	sp, #88	; 0x58
 8003b1e:	bd70      	pop	{r4, r5, r6, pc}
 8003b20:	466a      	mov	r2, sp
 8003b22:	f000 f849 	bl	8003bb8 <_fstat_r>
 8003b26:	2800      	cmp	r0, #0
 8003b28:	dbed      	blt.n	8003b06 <__swhatbuf_r+0x12>
 8003b2a:	9901      	ldr	r1, [sp, #4]
 8003b2c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003b30:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003b34:	4259      	negs	r1, r3
 8003b36:	4159      	adcs	r1, r3
 8003b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b3c:	e7eb      	b.n	8003b16 <__swhatbuf_r+0x22>

08003b3e <__smakebuf_r>:
 8003b3e:	898b      	ldrh	r3, [r1, #12]
 8003b40:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b42:	079d      	lsls	r5, r3, #30
 8003b44:	4606      	mov	r6, r0
 8003b46:	460c      	mov	r4, r1
 8003b48:	d507      	bpl.n	8003b5a <__smakebuf_r+0x1c>
 8003b4a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b4e:	6023      	str	r3, [r4, #0]
 8003b50:	6123      	str	r3, [r4, #16]
 8003b52:	2301      	movs	r3, #1
 8003b54:	6163      	str	r3, [r4, #20]
 8003b56:	b002      	add	sp, #8
 8003b58:	bd70      	pop	{r4, r5, r6, pc}
 8003b5a:	466a      	mov	r2, sp
 8003b5c:	ab01      	add	r3, sp, #4
 8003b5e:	f7ff ffc9 	bl	8003af4 <__swhatbuf_r>
 8003b62:	9900      	ldr	r1, [sp, #0]
 8003b64:	4605      	mov	r5, r0
 8003b66:	4630      	mov	r0, r6
 8003b68:	f7ff fad0 	bl	800310c <_malloc_r>
 8003b6c:	b948      	cbnz	r0, 8003b82 <__smakebuf_r+0x44>
 8003b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b72:	059a      	lsls	r2, r3, #22
 8003b74:	d4ef      	bmi.n	8003b56 <__smakebuf_r+0x18>
 8003b76:	f023 0303 	bic.w	r3, r3, #3
 8003b7a:	f043 0302 	orr.w	r3, r3, #2
 8003b7e:	81a3      	strh	r3, [r4, #12]
 8003b80:	e7e3      	b.n	8003b4a <__smakebuf_r+0xc>
 8003b82:	89a3      	ldrh	r3, [r4, #12]
 8003b84:	6020      	str	r0, [r4, #0]
 8003b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b8a:	81a3      	strh	r3, [r4, #12]
 8003b8c:	9b00      	ldr	r3, [sp, #0]
 8003b8e:	6120      	str	r0, [r4, #16]
 8003b90:	6163      	str	r3, [r4, #20]
 8003b92:	9b01      	ldr	r3, [sp, #4]
 8003b94:	b15b      	cbz	r3, 8003bae <__smakebuf_r+0x70>
 8003b96:	4630      	mov	r0, r6
 8003b98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b9c:	f000 f81e 	bl	8003bdc <_isatty_r>
 8003ba0:	b128      	cbz	r0, 8003bae <__smakebuf_r+0x70>
 8003ba2:	89a3      	ldrh	r3, [r4, #12]
 8003ba4:	f023 0303 	bic.w	r3, r3, #3
 8003ba8:	f043 0301 	orr.w	r3, r3, #1
 8003bac:	81a3      	strh	r3, [r4, #12]
 8003bae:	89a3      	ldrh	r3, [r4, #12]
 8003bb0:	431d      	orrs	r5, r3
 8003bb2:	81a5      	strh	r5, [r4, #12]
 8003bb4:	e7cf      	b.n	8003b56 <__smakebuf_r+0x18>
	...

08003bb8 <_fstat_r>:
 8003bb8:	b538      	push	{r3, r4, r5, lr}
 8003bba:	2300      	movs	r3, #0
 8003bbc:	4d06      	ldr	r5, [pc, #24]	; (8003bd8 <_fstat_r+0x20>)
 8003bbe:	4604      	mov	r4, r0
 8003bc0:	4608      	mov	r0, r1
 8003bc2:	4611      	mov	r1, r2
 8003bc4:	602b      	str	r3, [r5, #0]
 8003bc6:	f7fd fb84 	bl	80012d2 <_fstat>
 8003bca:	1c43      	adds	r3, r0, #1
 8003bcc:	d102      	bne.n	8003bd4 <_fstat_r+0x1c>
 8003bce:	682b      	ldr	r3, [r5, #0]
 8003bd0:	b103      	cbz	r3, 8003bd4 <_fstat_r+0x1c>
 8003bd2:	6023      	str	r3, [r4, #0]
 8003bd4:	bd38      	pop	{r3, r4, r5, pc}
 8003bd6:	bf00      	nop
 8003bd8:	20000288 	.word	0x20000288

08003bdc <_isatty_r>:
 8003bdc:	b538      	push	{r3, r4, r5, lr}
 8003bde:	2300      	movs	r3, #0
 8003be0:	4d05      	ldr	r5, [pc, #20]	; (8003bf8 <_isatty_r+0x1c>)
 8003be2:	4604      	mov	r4, r0
 8003be4:	4608      	mov	r0, r1
 8003be6:	602b      	str	r3, [r5, #0]
 8003be8:	f7fd fb82 	bl	80012f0 <_isatty>
 8003bec:	1c43      	adds	r3, r0, #1
 8003bee:	d102      	bne.n	8003bf6 <_isatty_r+0x1a>
 8003bf0:	682b      	ldr	r3, [r5, #0]
 8003bf2:	b103      	cbz	r3, 8003bf6 <_isatty_r+0x1a>
 8003bf4:	6023      	str	r3, [r4, #0]
 8003bf6:	bd38      	pop	{r3, r4, r5, pc}
 8003bf8:	20000288 	.word	0x20000288

08003bfc <_init>:
 8003bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bfe:	bf00      	nop
 8003c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c02:	bc08      	pop	{r3}
 8003c04:	469e      	mov	lr, r3
 8003c06:	4770      	bx	lr

08003c08 <_fini>:
 8003c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0a:	bf00      	nop
 8003c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c0e:	bc08      	pop	{r3}
 8003c10:	469e      	mov	lr, r3
 8003c12:	4770      	bx	lr
